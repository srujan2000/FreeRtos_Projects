
Led_Temp_Eeprom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fa0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041e4  080041e4  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080041e4  080041e4  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041e4  080041e4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041e4  080041e4  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041e8  080041e8  000141e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080041ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          00013440  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013448  20013448  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b766  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b00  00000000  00000000  0002b7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ae0  00000000  00000000  0002d2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000846  00000000  00000000  0002ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000042a7  00000000  00000000  0002e60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000beb2  00000000  00000000  000328b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0001732b  00000000  00000000  0003e767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002cfc  00000000  00000000  00055a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  00058790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000008 	.word	0x20000008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004118 	.word	0x08004118

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	08004118 	.word	0x08004118

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e7c 	.word	0x20012e7c

08000264 <GPIO_Init>:
#include "GPIO.h"


void GPIO_Init()
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
	RCC_AHB1ENR |= (1<<0);
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <GPIO_Init+0x28>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a07      	ldr	r2, [pc, #28]	; (800028c <GPIO_Init+0x28>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6013      	str	r3, [r2, #0]
	GPIOA_MODER |= (1<<0);
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <GPIO_Init+0x2c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a05      	ldr	r2, [pc, #20]	; (8000290 <GPIO_Init+0x2c>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40023830 	.word	0x40023830
 8000290:	40020000 	.word	0x40020000

08000294 <I2c_Init>:
#include "i2c.h"
#include "GPIO.h"
#include <stdint.h>

void I2c_Init(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
	RCC_AHB1ENR |= (1<<1);				/* Enable clock for GPIOB */
 8000298:	4b29      	ldr	r3, [pc, #164]	; (8000340 <I2c_Init+0xac>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a28      	ldr	r2, [pc, #160]	; (8000340 <I2c_Init+0xac>)
 800029e:	f043 0302 	orr.w	r3, r3, #2
 80002a2:	6013      	str	r3, [r2, #0]
	RCC_APB1ENR |= (1<<21);				/* Enable clock for I2C */
 80002a4:	4b27      	ldr	r3, [pc, #156]	; (8000344 <I2c_Init+0xb0>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a26      	ldr	r2, [pc, #152]	; (8000344 <I2c_Init+0xb0>)
 80002aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002ae:	6013      	str	r3, [r2, #0]
	GPIOB_MODER |= (2<<12)|(2<<14);		/* Alternate Mode for Port 6 and 7 */
 80002b0:	4b25      	ldr	r3, [pc, #148]	; (8000348 <I2c_Init+0xb4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a24      	ldr	r2, [pc, #144]	; (8000348 <I2c_Init+0xb4>)
 80002b6:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOB_OTYPER |= (1<<6)|(1<<7);	    /* Output drain for Port 6 and 7 */
 80002bc:	4b23      	ldr	r3, [pc, #140]	; (800034c <I2c_Init+0xb8>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a22      	ldr	r2, [pc, #136]	; (800034c <I2c_Init+0xb8>)
 80002c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002c6:	6013      	str	r3, [r2, #0]
	GPIOB_OTYPER |= (3<<6)|(3<<7);		/* High Speed output */
 80002c8:	4b20      	ldr	r3, [pc, #128]	; (800034c <I2c_Init+0xb8>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a1f      	ldr	r2, [pc, #124]	; (800034c <I2c_Init+0xb8>)
 80002ce:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 80002d2:	6013      	str	r3, [r2, #0]
	GPIOB_PUPDR  |= (1<<12)|(1<<14);    /* Pull-Up Resistor for Port 6 and 7 */
 80002d4:	4b1e      	ldr	r3, [pc, #120]	; (8000350 <I2c_Init+0xbc>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a1d      	ldr	r2, [pc, #116]	; (8000350 <I2c_Init+0xbc>)
 80002da:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80002de:	6013      	str	r3, [r2, #0]
	GPIOB_AFRL	|= (4<<24)|(4<<28);		/* I2C as alternate function for port 6 and 7 */
 80002e0:	4b1c      	ldr	r3, [pc, #112]	; (8000354 <I2c_Init+0xc0>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a1b      	ldr	r2, [pc, #108]	; (8000354 <I2c_Init+0xc0>)
 80002e6:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 80002ea:	6013      	str	r3, [r2, #0]


	I2C1_CR1 |= (1<<15);		/* Setting 	SWRST Bit */
 80002ec:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <I2c_Init+0xc4>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a19      	ldr	r2, [pc, #100]	; (8000358 <I2c_Init+0xc4>)
 80002f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002f6:	6013      	str	r3, [r2, #0]
	I2C1_CR1 &= ~(1<<15);		/* Clearing SWRST Bit */
 80002f8:	4b17      	ldr	r3, [pc, #92]	; (8000358 <I2c_Init+0xc4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a16      	ldr	r2, [pc, #88]	; (8000358 <I2c_Init+0xc4>)
 80002fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000302:	6013      	str	r3, [r2, #0]
	I2C1_CR1 &= ~(1<<1);		/* SMBUS is I2C Mode */
 8000304:	4b14      	ldr	r3, [pc, #80]	; (8000358 <I2c_Init+0xc4>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a13      	ldr	r2, [pc, #76]	; (8000358 <I2c_Init+0xc4>)
 800030a:	f023 0302 	bic.w	r3, r3, #2
 800030e:	6013      	str	r3, [r2, #0]
	I2C1_CR2 |= (16<<0);		/* 16MHZ */
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <I2c_Init+0xc8>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a11      	ldr	r2, [pc, #68]	; (800035c <I2c_Init+0xc8>)
 8000316:	f043 0310 	orr.w	r3, r3, #16
 800031a:	6013      	str	r3, [r2, #0]
	I2C1_CCR =  40;            /* FScl is 200KHz */
 800031c:	4b10      	ldr	r3, [pc, #64]	; (8000360 <I2c_Init+0xcc>)
 800031e:	2228      	movs	r2, #40	; 0x28
 8000320:	601a      	str	r2, [r3, #0]
	/* CCR Calculation
	CCR = (fclk/2)*SCL
	CCR = (16Mhz/2*100khz)=80 */
	I2C1_TRISE = 17;
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <I2c_Init+0xd0>)
 8000324:	2211      	movs	r2, #17
 8000326:	601a      	str	r2, [r3, #0]
	/* If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
	therefore the TRISE[5:0] bits must be programmed with 09h.
	(1000 ns / 125 ns = 8 + 1) */
	I2C1_CR1 |= (1<<0);			/* Peripheral enable */
 8000328:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <I2c_Init+0xc4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <I2c_Init+0xc4>)
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	6013      	str	r3, [r2, #0]
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40023830 	.word	0x40023830
 8000344:	40023840 	.word	0x40023840
 8000348:	40020400 	.word	0x40020400
 800034c:	40020404 	.word	0x40020404
 8000350:	4002040c 	.word	0x4002040c
 8000354:	40020420 	.word	0x40020420
 8000358:	40005400 	.word	0x40005400
 800035c:	40005404 	.word	0x40005404
 8000360:	4000541c 	.word	0x4000541c
 8000364:	40005420 	.word	0x40005420

08000368 <I2c_Start>:

void I2c_Start(void){
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	I2C1_CR1 |= (1<<8); /*  Start Condition */
 800036c:	4b09      	ldr	r3, [pc, #36]	; (8000394 <I2c_Start+0x2c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a08      	ldr	r2, [pc, #32]	; (8000394 <I2c_Start+0x2c>)
 8000372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000376:	6013      	str	r3, [r2, #0]
	while (!(I2C1_SR1 & (1<<0))); /* wait till start bit cleared */
 8000378:	bf00      	nop
 800037a:	4b07      	ldr	r3, [pc, #28]	; (8000398 <I2c_Start+0x30>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	2b00      	cmp	r3, #0
 8000384:	d0f9      	beq.n	800037a <I2c_Start+0x12>
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40005400 	.word	0x40005400
 8000398:	40005414 	.word	0x40005414

0800039c <I2c_Stop>:

void I2c_Stop(void){
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
	I2C1_CR1 |= (1<<10); /* Stop Condition */
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <I2c_Stop+0x1c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <I2c_Stop+0x1c>)
 80003a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003aa:	6013      	str	r3, [r2, #0]
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40005400 	.word	0x40005400

080003bc <I2c_Address>:

void I2c_Address(unsigned char Addr){
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
	I2C1_DR = Addr;
 80003c6:	4a0c      	ldr	r2, [pc, #48]	; (80003f8 <I2c_Address+0x3c>)
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	6013      	str	r3, [r2, #0]
	while (!(I2C1_SR1 & (1<<1))); /* wait till Addr bit cleared */
 80003cc:	bf00      	nop
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <I2c_Address+0x40>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f003 0302 	and.w	r3, r3, #2
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0f9      	beq.n	80003ce <I2c_Address+0x12>
	uint8_t temp = 	I2C1_SR1 | I2C1_SR2; /* Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag */
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <I2c_Address+0x40>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <I2c_Address+0x44>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	4313      	orrs	r3, r2
 80003e8:	73fb      	strb	r3, [r7, #15]
}
 80003ea:	bf00      	nop
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40005410 	.word	0x40005410
 80003fc:	40005414 	.word	0x40005414
 8000400:	40005418 	.word	0x40005418

08000404 <I2c_Write>:

void I2c_Write(unsigned char Data){
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
	while (!(I2C1_SR1 & (1<<7))); /* wait till Tx Buffer is empty */
 800040e:	bf00      	nop
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <I2c_Write+0x3c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000418:	2b00      	cmp	r3, #0
 800041a:	d0f9      	beq.n	8000410 <I2c_Write+0xc>
	I2C1_DR = Data;
 800041c:	4a09      	ldr	r2, [pc, #36]	; (8000444 <I2c_Write+0x40>)
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	6013      	str	r3, [r2, #0]
	while (!(I2C1_SR1 & (1<<2))); /* wait till Byte transfer is complete */
 8000422:	bf00      	nop
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <I2c_Write+0x3c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f003 0304 	and.w	r3, r3, #4
 800042c:	2b00      	cmp	r3, #0
 800042e:	d0f9      	beq.n	8000424 <I2c_Write+0x20>
}
 8000430:	bf00      	nop
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40005414 	.word	0x40005414
 8000444:	40005410 	.word	0x40005410

08000448 <main>:

int Addr = 0;
int Data = 0;

int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af02      	add	r7, sp, #8

	GPIO_Init();
 800044e:	f7ff ff09 	bl	8000264 <GPIO_Init>
	I2c_Init();
 8000452:	f7ff ff1f 	bl	8000294 <I2c_Init>

	BaseType_t status;
	TaskHandle_t Task_Handle1;
	TaskHandle_t Task_Handle2;

	status =  xTaskCreate(LED_Blink, "LED", 200, "LED Blink", 2, &Task_Handle1);
 8000456:	f107 0308 	add.w	r3, r7, #8
 800045a:	9301      	str	r3, [sp, #4]
 800045c:	2302      	movs	r3, #2
 800045e:	9300      	str	r3, [sp, #0]
 8000460:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <main+0x7c>)
 8000462:	22c8      	movs	r2, #200	; 0xc8
 8000464:	4918      	ldr	r1, [pc, #96]	; (80004c8 <main+0x80>)
 8000466:	4819      	ldr	r0, [pc, #100]	; (80004cc <main+0x84>)
 8000468:	f000 fc68 	bl	8000d3c <xTaskCreate>
 800046c:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d00a      	beq.n	800048a <main+0x42>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000478:	f383 8811 	msr	BASEPRI, r3
 800047c:	f3bf 8f6f 	isb	sy
 8000480:	f3bf 8f4f 	dsb	sy
 8000484:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000486:	bf00      	nop
 8000488:	e7fe      	b.n	8000488 <main+0x40>

	status =  xTaskCreate(EEPROM_Write, "EEPROM", 200, "EEPROM", 2, &Task_Handle2);
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	9301      	str	r3, [sp, #4]
 800048e:	2302      	movs	r3, #2
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <main+0x88>)
 8000494:	22c8      	movs	r2, #200	; 0xc8
 8000496:	490e      	ldr	r1, [pc, #56]	; (80004d0 <main+0x88>)
 8000498:	480e      	ldr	r0, [pc, #56]	; (80004d4 <main+0x8c>)
 800049a:	f000 fc4f 	bl	8000d3c <xTaskCreate>
 800049e:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d00a      	beq.n	80004bc <main+0x74>
        __asm volatile
 80004a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004aa:	f383 8811 	msr	BASEPRI, r3
 80004ae:	f3bf 8f6f 	isb	sy
 80004b2:	f3bf 8f4f 	dsb	sy
 80004b6:	60fb      	str	r3, [r7, #12]
    }
 80004b8:	bf00      	nop
 80004ba:	e7fe      	b.n	80004ba <main+0x72>
//
//	Addr +=1;
//	I2c_Stop();
//}

	vTaskStartScheduler();
 80004bc:	f000 fdfe 	bl	80010bc <vTaskStartScheduler>
	while(1){
 80004c0:	e7fe      	b.n	80004c0 <main+0x78>
 80004c2:	bf00      	nop
 80004c4:	08004130 	.word	0x08004130
 80004c8:	0800413c 	.word	0x0800413c
 80004cc:	080004d9 	.word	0x080004d9
 80004d0:	08004140 	.word	0x08004140
 80004d4:	080004fd 	.word	0x080004fd

080004d8 <LED_Blink>:


	}
}

static void LED_Blink(void* Paramters){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	while(1){
			GPIOA_ODR ^= 0x01;
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <LED_Blink+0x20>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <LED_Blink+0x20>)
 80004e6:	f083 0301 	eor.w	r3, r3, #1
 80004ea:	6013      	str	r3, [r2, #0]
			vTaskDelay(1000);
 80004ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f0:	f000 fdac 	bl	800104c <vTaskDelay>
			GPIOA_ODR ^= 0x01;
 80004f4:	e7f4      	b.n	80004e0 <LED_Blink+0x8>
 80004f6:	bf00      	nop
 80004f8:	40020014 	.word	0x40020014

080004fc <EEPROM_Write>:
//			delay();
	}
}

static void EEPROM_Write(void* Parameters){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	while(1){
		I2c_Start();
 8000504:	f7ff ff30 	bl	8000368 <I2c_Start>
		I2c_Address(0xA0); /* Address of Slave */
 8000508:	20a0      	movs	r0, #160	; 0xa0
 800050a:	f7ff ff57 	bl	80003bc <I2c_Address>
		I2c_Write((int)(Addr>>8));
 800050e:	4b14      	ldr	r3, [pc, #80]	; (8000560 <EEPROM_Write+0x64>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	121b      	asrs	r3, r3, #8
 8000514:	b2db      	uxtb	r3, r3
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ff74 	bl	8000404 <I2c_Write>
		I2c_Write((int)(Addr & 0xFF));
 800051c:	4b10      	ldr	r3, [pc, #64]	; (8000560 <EEPROM_Write+0x64>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff ff6e 	bl	8000404 <I2c_Write>
		I2c_Write((unsigned char)Data & 0x0F);
 8000528:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <EEPROM_Write+0x68>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	f003 030f 	and.w	r3, r3, #15
 8000532:	b2db      	uxtb	r3, r3
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff65 	bl	8000404 <I2c_Write>
		I2c_Stop();
 800053a:	f7ff ff2f 	bl	800039c <I2c_Stop>
//		I2c_Write(0x00);
//		I2C1_CR1 |= (1<<10); /* Ack enable */
//		while(!(I2C1_SR1)&&(1<<6)); /* Wait till rx register is not empty */
//		unsigned char temp = I2C1_DR;

		Addr +=1;
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <EEPROM_Write+0x64>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	4a06      	ldr	r2, [pc, #24]	; (8000560 <EEPROM_Write+0x64>)
 8000546:	6013      	str	r3, [r2, #0]
		Data +=1;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <EEPROM_Write+0x68>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <EEPROM_Write+0x68>)
 8000550:	6013      	str	r3, [r2, #0]
		I2c_Stop();
 8000552:	f7ff ff23 	bl	800039c <I2c_Stop>
		vTaskDelay(2000);
 8000556:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800055a:	f000 fd77 	bl	800104c <vTaskDelay>
		I2c_Start();
 800055e:	e7d1      	b.n	8000504 <EEPROM_Write+0x8>
 8000560:	20000024 	.word	0x20000024
 8000564:	20000028 	.word	0x20000028

08000568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800056a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800056c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000572:	490d      	ldr	r1, [pc, #52]	; (80005a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000574:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <LoopForever+0xe>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000578:	e002      	b.n	8000580 <LoopCopyDataInit>

0800057a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800057c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057e:	3304      	adds	r3, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000584:	d3f9      	bcc.n	800057a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000586:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000588:	4c0a      	ldr	r4, [pc, #40]	; (80005b4 <LoopForever+0x16>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800058c:	e001      	b.n	8000592 <LoopFillZerobss>

0800058e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000590:	3204      	adds	r2, #4

08000592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000594:	d3fb      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000596:	f003 fd8d 	bl	80040b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059a:	f7ff ff55 	bl	8000448 <main>

0800059e <LoopForever>:

LoopForever:
  b LoopForever
 800059e:	e7fe      	b.n	800059e <LoopForever>
  ldr   r0, =_estack
 80005a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80005ac:	080041ec 	.word	0x080041ec
  ldr r2, =_sbss
 80005b0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80005b4:	20013448 	.word	0x20013448

080005b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC_IRQHandler>

080005ba <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f103 0208 	add.w	r2, r3, #8
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f04f 32ff 	mov.w	r2, #4294967295
 80005d2:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f103 0208 	add.w	r2, r3, #8
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f103 0208 	add.w	r2, r3, #8
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800062a:	d103      	bne.n	8000634 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e00c      	b.n	800064e <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3308      	adds	r3, #8
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	e002      	b.n	8000642 <vListInsert+0x2e>
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	68ba      	ldr	r2, [r7, #8]
 800064a:	429a      	cmp	r2, r3
 800064c:	d2f6      	bcs.n	800063c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	685a      	ldr	r2, [r3, #4]
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	683a      	ldr	r2, [r7, #0]
 800065c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	1c5a      	adds	r2, r3, #1
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	601a      	str	r2, [r3, #0]
}
 800067a:	bf00      	nop
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000686:	b480      	push	{r7}
 8000688:	b085      	sub	sp, #20
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	691b      	ldr	r3, [r3, #16]
 8000692:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	6892      	ldr	r2, [r2, #8]
 800069c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	689b      	ldr	r3, [r3, #8]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	6852      	ldr	r2, [r2, #4]
 80006a6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d103      	bne.n	80006ba <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	1e5a      	subs	r2, r3, #1
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	681b      	ldr	r3, [r3, #0]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
	...

080006dc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80006e6:	2301      	movs	r3, #1
 80006e8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10a      	bne.n	800070a <xQueueGenericReset+0x2e>
        __asm volatile
 80006f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f8:	f383 8811 	msr	BASEPRI, r3
 80006fc:	f3bf 8f6f 	isb	sy
 8000700:	f3bf 8f4f 	dsb	sy
 8000704:	60fb      	str	r3, [r7, #12]
    }
 8000706:	bf00      	nop
 8000708:	e7fe      	b.n	8000708 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d05d      	beq.n	80007cc <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000714:	2b00      	cmp	r3, #0
 8000716:	d059      	beq.n	80007cc <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000720:	2100      	movs	r1, #0
 8000722:	fba3 2302 	umull	r2, r3, r3, r2
 8000726:	2b00      	cmp	r3, #0
 8000728:	d000      	beq.n	800072c <xQueueGenericReset+0x50>
 800072a:	2101      	movs	r1, #1
 800072c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800072e:	2b00      	cmp	r3, #0
 8000730:	d14c      	bne.n	80007cc <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000732:	f001 fe99 	bl	8002468 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800073e:	6939      	ldr	r1, [r7, #16]
 8000740:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000742:	fb01 f303 	mul.w	r3, r1, r3
 8000746:	441a      	add	r2, r3
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	2200      	movs	r2, #0
 8000750:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000762:	3b01      	subs	r3, #1
 8000764:	6939      	ldr	r1, [r7, #16]
 8000766:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000768:	fb01 f303 	mul.w	r3, r1, r3
 800076c:	441a      	add	r2, r3
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	22ff      	movs	r2, #255	; 0xff
 8000776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	22ff      	movs	r2, #255	; 0xff
 800077e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d114      	bne.n	80007b2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	691b      	ldr	r3, [r3, #16]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d01a      	beq.n	80007c6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	3310      	adds	r3, #16
 8000794:	4618      	mov	r0, r3
 8000796:	f001 f801 	bl	800179c <xTaskRemoveFromEventList>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d012      	beq.n	80007c6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <xQueueGenericReset+0x11c>)
 80007a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	f3bf 8f4f 	dsb	sy
 80007ac:	f3bf 8f6f 	isb	sy
 80007b0:	e009      	b.n	80007c6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	3310      	adds	r3, #16
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff feff 	bl	80005ba <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	3324      	adds	r3, #36	; 0x24
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fefa 	bl	80005ba <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80007c6:	f001 fe7f 	bl	80024c8 <vPortExitCritical>
 80007ca:	e001      	b.n	80007d0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d10a      	bne.n	80007ec <xQueueGenericReset+0x110>
        __asm volatile
 80007d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007da:	f383 8811 	msr	BASEPRI, r3
 80007de:	f3bf 8f6f 	isb	sy
 80007e2:	f3bf 8f4f 	dsb	sy
 80007e6:	60bb      	str	r3, [r7, #8]
    }
 80007e8:	bf00      	nop
 80007ea:	e7fe      	b.n	80007ea <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80007ec:	697b      	ldr	r3, [r7, #20]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	e000ed04 	.word	0xe000ed04

080007fc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af02      	add	r7, sp, #8
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	4613      	mov	r3, r2
 8000808:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d02e      	beq.n	8000872 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000814:	2100      	movs	r1, #0
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	fba3 2302 	umull	r2, r3, r3, r2
 800081e:	2b00      	cmp	r3, #0
 8000820:	d000      	beq.n	8000824 <xQueueGenericCreate+0x28>
 8000822:	2101      	movs	r1, #1
 8000824:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000826:	2b00      	cmp	r3, #0
 8000828:	d123      	bne.n	8000872 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	68ba      	ldr	r2, [r7, #8]
 800082e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000832:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000836:	d81c      	bhi.n	8000872 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	fb02 f303 	mul.w	r3, r2, r3
 8000840:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000842:	69bb      	ldr	r3, [r7, #24]
 8000844:	3350      	adds	r3, #80	; 0x50
 8000846:	4618      	mov	r0, r3
 8000848:	f001 feee 	bl	8002628 <pvPortMalloc>
 800084c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d01c      	beq.n	800088e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	3350      	adds	r3, #80	; 0x50
 800085c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800085e:	79fa      	ldrb	r2, [r7, #7]
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	4613      	mov	r3, r2
 8000866:	697a      	ldr	r2, [r7, #20]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f000 f814 	bl	8000898 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000870:	e00d      	b.n	800088e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d10a      	bne.n	800088e <xQueueGenericCreate+0x92>
        __asm volatile
 8000878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800087c:	f383 8811 	msr	BASEPRI, r3
 8000880:	f3bf 8f6f 	isb	sy
 8000884:	f3bf 8f4f 	dsb	sy
 8000888:	613b      	str	r3, [r7, #16]
    }
 800088a:	bf00      	nop
 800088c:	e7fe      	b.n	800088c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800088e:	69fb      	ldr	r3, [r7, #28]
    }
 8000890:	4618      	mov	r0, r3
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d103      	bne.n	80008b4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	e002      	b.n	80008ba <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008c6:	2101      	movs	r1, #1
 80008c8:	69b8      	ldr	r0, [r7, #24]
 80008ca:	f7ff ff07 	bl	80006dc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	78fa      	ldrb	r2, [r7, #3]
 80008d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	68ba      	ldr	r2, [r7, #8]
 80008da:	68f9      	ldr	r1, [r7, #12]
 80008dc:	2073      	movs	r0, #115	; 0x73
 80008de:	f002 fd75 	bl	80033cc <SEGGER_SYSVIEW_RecordU32x3>
}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b08f      	sub	sp, #60	; 0x3c
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000902:	2b00      	cmp	r3, #0
 8000904:	d10a      	bne.n	800091c <xQueueReceive+0x30>
        __asm volatile
 8000906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800090a:	f383 8811 	msr	BASEPRI, r3
 800090e:	f3bf 8f6f 	isb	sy
 8000912:	f3bf 8f4f 	dsb	sy
 8000916:	623b      	str	r3, [r7, #32]
    }
 8000918:	bf00      	nop
 800091a:	e7fe      	b.n	800091a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d103      	bne.n	800092a <xQueueReceive+0x3e>
 8000922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	2b00      	cmp	r3, #0
 8000928:	d101      	bne.n	800092e <xQueueReceive+0x42>
 800092a:	2301      	movs	r3, #1
 800092c:	e000      	b.n	8000930 <xQueueReceive+0x44>
 800092e:	2300      	movs	r3, #0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10a      	bne.n	800094a <xQueueReceive+0x5e>
        __asm volatile
 8000934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000938:	f383 8811 	msr	BASEPRI, r3
 800093c:	f3bf 8f6f 	isb	sy
 8000940:	f3bf 8f4f 	dsb	sy
 8000944:	61fb      	str	r3, [r7, #28]
    }
 8000946:	bf00      	nop
 8000948:	e7fe      	b.n	8000948 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800094a:	f001 f939 	bl	8001bc0 <xTaskGetSchedulerState>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <xQueueReceive+0x6e>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d101      	bne.n	800095e <xQueueReceive+0x72>
 800095a:	2301      	movs	r3, #1
 800095c:	e000      	b.n	8000960 <xQueueReceive+0x74>
 800095e:	2300      	movs	r3, #0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d10a      	bne.n	800097a <xQueueReceive+0x8e>
        __asm volatile
 8000964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000968:	f383 8811 	msr	BASEPRI, r3
 800096c:	f3bf 8f6f 	isb	sy
 8000970:	f3bf 8f4f 	dsb	sy
 8000974:	61bb      	str	r3, [r7, #24]
    }
 8000976:	bf00      	nop
 8000978:	e7fe      	b.n	8000978 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800097a:	f001 fd75 	bl	8002468 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800097e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000982:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000986:	2b00      	cmp	r3, #0
 8000988:	d02f      	beq.n	80009ea <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800098e:	f000 f8bd 	bl	8000b0c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000994:	4618      	mov	r0, r3
 8000996:	f003 fa23 	bl	8003de0 <SEGGER_SYSVIEW_ShrinkId>
 800099a:	4604      	mov	r4, r0
 800099c:	2000      	movs	r0, #0
 800099e:	f003 fa1f 	bl	8003de0 <SEGGER_SYSVIEW_ShrinkId>
 80009a2:	4602      	mov	r2, r0
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2101      	movs	r1, #1
 80009a8:	9100      	str	r1, [sp, #0]
 80009aa:	4621      	mov	r1, r4
 80009ac:	205c      	movs	r0, #92	; 0x5c
 80009ae:	f002 fd83 	bl	80034b8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80009b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80009ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d00f      	beq.n	80009e2 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c4:	3310      	adds	r3, #16
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fee8 	bl	800179c <xTaskRemoveFromEventList>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d007      	beq.n	80009e2 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80009d2:	4b4d      	ldr	r3, [pc, #308]	; (8000b08 <xQueueReceive+0x21c>)
 80009d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	f3bf 8f4f 	dsb	sy
 80009de:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80009e2:	f001 fd71 	bl	80024c8 <vPortExitCritical>
                return pdPASS;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e08a      	b.n	8000b00 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d113      	bne.n	8000a18 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80009f0:	f001 fd6a 	bl	80024c8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80009f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f6:	4618      	mov	r0, r3
 80009f8:	f003 f9f2 	bl	8003de0 <SEGGER_SYSVIEW_ShrinkId>
 80009fc:	4604      	mov	r4, r0
 80009fe:	2000      	movs	r0, #0
 8000a00:	f003 f9ee 	bl	8003de0 <SEGGER_SYSVIEW_ShrinkId>
 8000a04:	4602      	mov	r2, r0
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2101      	movs	r1, #1
 8000a0a:	9100      	str	r1, [sp, #0]
 8000a0c:	4621      	mov	r1, r4
 8000a0e:	205c      	movs	r0, #92	; 0x5c
 8000a10:	f002 fd52 	bl	80034b8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000a14:	2300      	movs	r3, #0
 8000a16:	e073      	b.n	8000b00 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d106      	bne.n	8000a2c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 ff92 	bl	800194c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a2c:	f001 fd4c 	bl	80024c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a30:	f000 fba6 	bl	8001180 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a34:	f001 fd18 	bl	8002468 <vPortEnterCritical>
 8000a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a3e:	b25b      	sxtb	r3, r3
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a44:	d103      	bne.n	8000a4e <xQueueReceive+0x162>
 8000a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a5a:	d103      	bne.n	8000a64 <xQueueReceive+0x178>
 8000a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a64:	f001 fd30 	bl	80024c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a68:	1d3a      	adds	r2, r7, #4
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 ff81 	bl	8001978 <xTaskCheckForTimeOut>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d124      	bne.n	8000ac6 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a7e:	f000 f8bd 	bl	8000bfc <prvIsQueueEmpty>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d018      	beq.n	8000aba <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8a:	3324      	adds	r3, #36	; 0x24
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fe17 	bl	80016c4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a98:	f000 f85e 	bl	8000b58 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000a9c:	f000 fb7e 	bl	800119c <xTaskResumeAll>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f47f af69 	bne.w	800097a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <xQueueReceive+0x21c>)
 8000aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	f3bf 8f4f 	dsb	sy
 8000ab4:	f3bf 8f6f 	isb	sy
 8000ab8:	e75f      	b.n	800097a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000abc:	f000 f84c 	bl	8000b58 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ac0:	f000 fb6c 	bl	800119c <xTaskResumeAll>
 8000ac4:	e759      	b.n	800097a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ac8:	f000 f846 	bl	8000b58 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000acc:	f000 fb66 	bl	800119c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ad2:	f000 f893 	bl	8000bfc <prvIsQueueEmpty>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	f43f af4e 	beq.w	800097a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 f97d 	bl	8003de0 <SEGGER_SYSVIEW_ShrinkId>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f003 f979 	bl	8003de0 <SEGGER_SYSVIEW_ShrinkId>
 8000aee:	4602      	mov	r2, r0
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2101      	movs	r1, #1
 8000af4:	9100      	str	r1, [sp, #0]
 8000af6:	4621      	mov	r1, r4
 8000af8:	205c      	movs	r0, #92	; 0x5c
 8000afa:	f002 fcdd 	bl	80034b8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000afe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3734      	adds	r7, #52	; 0x34
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	e000ed04 	.word	0xe000ed04

08000b0c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d018      	beq.n	8000b50 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	68da      	ldr	r2, [r3, #12]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	441a      	add	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	68da      	ldr	r2, [r3, #12]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d303      	bcc.n	8000b40 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68d9      	ldr	r1, [r3, #12]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	461a      	mov	r2, r3
 8000b4a:	6838      	ldr	r0, [r7, #0]
 8000b4c:	f003 fad6 	bl	80040fc <memcpy>
    }
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000b60:	f001 fc82 	bl	8002468 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b6a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b6c:	e011      	b.n	8000b92 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d012      	beq.n	8000b9c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3324      	adds	r3, #36	; 0x24
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 fe0e 	bl	800179c <xTaskRemoveFromEventList>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000b86:	f000 ff5d 	bl	8001a44 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	dce9      	bgt.n	8000b6e <prvUnlockQueue+0x16>
 8000b9a:	e000      	b.n	8000b9e <prvUnlockQueue+0x46>
                    break;
 8000b9c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	22ff      	movs	r2, #255	; 0xff
 8000ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000ba6:	f001 fc8f 	bl	80024c8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000baa:	f001 fc5d 	bl	8002468 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bb4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000bb6:	e011      	b.n	8000bdc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d012      	beq.n	8000be6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3310      	adds	r3, #16
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fde9 	bl	800179c <xTaskRemoveFromEventList>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000bd0:	f000 ff38 	bl	8001a44 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000bd4:	7bbb      	ldrb	r3, [r7, #14]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000bdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	dce9      	bgt.n	8000bb8 <prvUnlockQueue+0x60>
 8000be4:	e000      	b.n	8000be8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000be6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	22ff      	movs	r2, #255	; 0xff
 8000bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000bf0:	f001 fc6a 	bl	80024c8 <vPortExitCritical>
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000c04:	f001 fc30 	bl	8002468 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000c10:	2301      	movs	r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	e001      	b.n	8000c1a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000c1a:	f001 fc55 	bl	80024c8 <vPortExitCritical>

    return xReturn;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d10a      	bne.n	8000c52 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8000c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c40:	f383 8811 	msr	BASEPRI, r3
 8000c44:	f3bf 8f6f 	isb	sy
 8000c48:	f3bf 8f4f 	dsb	sy
 8000c4c:	60fb      	str	r3, [r7, #12]
    }
 8000c4e:	bf00      	nop
 8000c50:	e7fe      	b.n	8000c50 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d024      	beq.n	8000ca2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	e01e      	b.n	8000c9c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000c5e:	4a1c      	ldr	r2, [pc, #112]	; (8000cd0 <vQueueAddToRegistry+0xa8>)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	4413      	add	r3, r2
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d105      	bne.n	8000c7a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <vQueueAddToRegistry+0xa8>)
 8000c74:	4413      	add	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
                    break;
 8000c78:	e013      	b.n	8000ca2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d10a      	bne.n	8000c96 <vQueueAddToRegistry+0x6e>
 8000c80:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <vQueueAddToRegistry+0xa8>)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d104      	bne.n	8000c96 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <vQueueAddToRegistry+0xa8>)
 8000c92:	4413      	add	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	2b07      	cmp	r3, #7
 8000ca0:	d9dd      	bls.n	8000c5e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00f      	beq.n	8000cc8 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 f892 	bl	8003de0 <SEGGER_SYSVIEW_ShrinkId>
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	2071      	movs	r0, #113	; 0x71
 8000cc4:	f002 fb28 	bl	8003318 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2000002c 	.word	0x2000002c

08000cd4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000ce4:	f001 fbc0 	bl	8002468 <vPortEnterCritical>
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf4:	d103      	bne.n	8000cfe <vQueueWaitForMessageRestricted+0x2a>
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d04:	b25b      	sxtb	r3, r3
 8000d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0a:	d103      	bne.n	8000d14 <vQueueWaitForMessageRestricted+0x40>
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d14:	f001 fbd8 	bl	80024c8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d106      	bne.n	8000d2e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3324      	adds	r3, #36	; 0x24
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	68b9      	ldr	r1, [r7, #8]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 fcef 	bl	800170c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff12 	bl	8000b58 <prvUnlockQueue>
    }
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	; 0x30
 8000d40:	af04      	add	r7, sp, #16
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fc69 	bl	8002628 <pvPortMalloc>
 8000d56:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d013      	beq.n	8000d86 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000d5e:	2058      	movs	r0, #88	; 0x58
 8000d60:	f001 fc62 	bl	8002628 <pvPortMalloc>
 8000d64:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d008      	beq.n	8000d7e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000d6c:	2258      	movs	r2, #88	; 0x58
 8000d6e:	2100      	movs	r1, #0
 8000d70:	69f8      	ldr	r0, [r7, #28]
 8000d72:	f003 f997 	bl	80040a4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d7c:	e005      	b.n	8000d8a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f001 fd0c 	bl	800279c <vPortFree>
 8000d84:	e001      	b.n	8000d8a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d013      	beq.n	8000db8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000d90:	88fa      	ldrh	r2, [r7, #6]
 8000d92:	2300      	movs	r3, #0
 8000d94:	9303      	str	r3, [sp, #12]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	9302      	str	r3, [sp, #8]
 8000d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f000 f80e 	bl	8000dc8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000dac:	69f8      	ldr	r0, [r7, #28]
 8000dae:	f000 f899 	bl	8000ee4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	e002      	b.n	8000dbe <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000dbe:	69bb      	ldr	r3, [r7, #24]
    }
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	461a      	mov	r2, r3
 8000de0:	21a5      	movs	r1, #165	; 0xa5
 8000de2:	f003 f95f 	bl	80040a4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000df0:	3b01      	subs	r3, #1
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	f023 0307 	bic.w	r3, r3, #7
 8000dfe:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00a      	beq.n	8000e20 <prvInitialiseNewTask+0x58>
        __asm volatile
 8000e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e0e:	f383 8811 	msr	BASEPRI, r3
 8000e12:	f3bf 8f6f 	isb	sy
 8000e16:	f3bf 8f4f 	dsb	sy
 8000e1a:	617b      	str	r3, [r7, #20]
    }
 8000e1c:	bf00      	nop
 8000e1e:	e7fe      	b.n	8000e1e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d01e      	beq.n	8000e64 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	e012      	b.n	8000e52 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000e2c:	68ba      	ldr	r2, [r7, #8]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	4413      	add	r3, r2
 8000e32:	7819      	ldrb	r1, [r3, #0]
 8000e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	4413      	add	r3, r2
 8000e3a:	3334      	adds	r3, #52	; 0x34
 8000e3c:	460a      	mov	r2, r1
 8000e3e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000e40:	68ba      	ldr	r2, [r7, #8]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	4413      	add	r3, r2
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	2b09      	cmp	r3, #9
 8000e56:	d9e9      	bls.n	8000e2c <prvInitialiseNewTask+0x64>
 8000e58:	e000      	b.n	8000e5c <prvInitialiseNewTask+0x94>
            {
                break;
 8000e5a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	d90a      	bls.n	8000e80 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8000e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e6e:	f383 8811 	msr	BASEPRI, r3
 8000e72:	f3bf 8f6f 	isb	sy
 8000e76:	f3bf 8f4f 	dsb	sy
 8000e7a:	613b      	str	r3, [r7, #16]
    }
 8000e7c:	bf00      	nop
 8000e7e:	e7fe      	b.n	8000e7e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d901      	bls.n	8000e8a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000e86:	2304      	movs	r3, #4
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e94:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e98:	3304      	adds	r3, #4
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fbad 	bl	80005fa <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea2:	3318      	adds	r3, #24
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fba8 	bl	80005fa <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb2:	f1c3 0205 	rsb	r2, r3, #5
 8000eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	68f9      	ldr	r1, [r7, #12]
 8000ec4:	69b8      	ldr	r0, [r7, #24]
 8000ec6:	f001 f99d 	bl	8002204 <pxPortInitialiseStack>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ece:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eda:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000edc:	bf00      	nop
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000eec:	f001 fabc 	bl	8002468 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000ef0:	4b4f      	ldr	r3, [pc, #316]	; (8001030 <prvAddNewTaskToReadyList+0x14c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	4a4e      	ldr	r2, [pc, #312]	; (8001030 <prvAddNewTaskToReadyList+0x14c>)
 8000ef8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000efa:	4b4e      	ldr	r3, [pc, #312]	; (8001034 <prvAddNewTaskToReadyList+0x150>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d109      	bne.n	8000f16 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000f02:	4a4c      	ldr	r2, [pc, #304]	; (8001034 <prvAddNewTaskToReadyList+0x150>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000f08:	4b49      	ldr	r3, [pc, #292]	; (8001030 <prvAddNewTaskToReadyList+0x14c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d110      	bne.n	8000f32 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000f10:	f000 fdbc 	bl	8001a8c <prvInitialiseTaskLists>
 8000f14:	e00d      	b.n	8000f32 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000f16:	4b48      	ldr	r3, [pc, #288]	; (8001038 <prvAddNewTaskToReadyList+0x154>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d109      	bne.n	8000f32 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000f1e:	4b45      	ldr	r3, [pc, #276]	; (8001034 <prvAddNewTaskToReadyList+0x150>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d802      	bhi.n	8000f32 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000f2c:	4a41      	ldr	r2, [pc, #260]	; (8001034 <prvAddNewTaskToReadyList+0x150>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000f32:	4b42      	ldr	r3, [pc, #264]	; (800103c <prvAddNewTaskToReadyList+0x158>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	4a40      	ldr	r2, [pc, #256]	; (800103c <prvAddNewTaskToReadyList+0x158>)
 8000f3a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000f3c:	4b3f      	ldr	r3, [pc, #252]	; (800103c <prvAddNewTaskToReadyList+0x158>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d016      	beq.n	8000f78 <prvAddNewTaskToReadyList+0x94>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f002 fe81 	bl	8003c54 <SEGGER_SYSVIEW_OnTaskCreate>
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	461d      	mov	r5, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	461c      	mov	r4, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	1ae3      	subs	r3, r4, r3
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	462b      	mov	r3, r5
 8000f74:	f001 fd24 	bl	80029c0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 feee 	bl	8003d5c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f84:	2201      	movs	r2, #1
 8000f86:	409a      	lsls	r2, r3
 8000f88:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <prvAddNewTaskToReadyList+0x15c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	4a2c      	ldr	r2, [pc, #176]	; (8001040 <prvAddNewTaskToReadyList+0x15c>)
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f96:	492b      	ldr	r1, [pc, #172]	; (8001044 <prvAddNewTaskToReadyList+0x160>)
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	3204      	adds	r2, #4
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	1d1a      	adds	r2, r3, #4
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	; (8001044 <prvAddNewTaskToReadyList+0x160>)
 8000fd6:	441a      	add	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	615a      	str	r2, [r3, #20]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fe0:	4918      	ldr	r1, [pc, #96]	; (8001044 <prvAddNewTaskToReadyList+0x160>)
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	440b      	add	r3, r1
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	1c59      	adds	r1, r3, #1
 8000ff0:	4814      	ldr	r0, [pc, #80]	; (8001044 <prvAddNewTaskToReadyList+0x160>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4403      	add	r3, r0
 8000ffc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000ffe:	f001 fa63 	bl	80024c8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <prvAddNewTaskToReadyList+0x154>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00e      	beq.n	8001028 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <prvAddNewTaskToReadyList+0x150>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <prvAddNewTaskToReadyList+0x164>)
 800101a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	f3bf 8f4f 	dsb	sy
 8001024:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bdb0      	pop	{r4, r5, r7, pc}
 8001030:	20000144 	.word	0x20000144
 8001034:	2000006c 	.word	0x2000006c
 8001038:	20000150 	.word	0x20000150
 800103c:	20000160 	.word	0x20000160
 8001040:	2000014c 	.word	0x2000014c
 8001044:	20000070 	.word	0x20000070
 8001048:	e000ed04 	.word	0xe000ed04

0800104c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d01b      	beq.n	8001096 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <vTaskDelay+0x68>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00a      	beq.n	800107c <vTaskDelay+0x30>
        __asm volatile
 8001066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800106a:	f383 8811 	msr	BASEPRI, r3
 800106e:	f3bf 8f6f 	isb	sy
 8001072:	f3bf 8f4f 	dsb	sy
 8001076:	60bb      	str	r3, [r7, #8]
    }
 8001078:	bf00      	nop
 800107a:	e7fe      	b.n	800107a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800107c:	f000 f880 	bl	8001180 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	2023      	movs	r0, #35	; 0x23
 8001084:	f002 f90c 	bl	80032a0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001088:	2100      	movs	r1, #0
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 fdb6 	bl	8001bfc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001090:	f000 f884 	bl	800119c <xTaskResumeAll>
 8001094:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d107      	bne.n	80010ac <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <vTaskDelay+0x6c>)
 800109e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	f3bf 8f4f 	dsb	sy
 80010a8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000016c 	.word	0x2000016c
 80010b8:	e000ed04 	.word	0xe000ed04

080010bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80010c2:	4b27      	ldr	r3, [pc, #156]	; (8001160 <vTaskStartScheduler+0xa4>)
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	2300      	movs	r3, #0
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2300      	movs	r3, #0
 80010cc:	2282      	movs	r2, #130	; 0x82
 80010ce:	4925      	ldr	r1, [pc, #148]	; (8001164 <vTaskStartScheduler+0xa8>)
 80010d0:	4825      	ldr	r0, [pc, #148]	; (8001168 <vTaskStartScheduler+0xac>)
 80010d2:	f7ff fe33 	bl	8000d3c <xTaskCreate>
 80010d6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d102      	bne.n	80010e4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80010de:	f000 fe0d 	bl	8001cfc <xTimerCreateTimerTask>
 80010e2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d124      	bne.n	8001134 <vTaskStartScheduler+0x78>
        __asm volatile
 80010ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ee:	f383 8811 	msr	BASEPRI, r3
 80010f2:	f3bf 8f6f 	isb	sy
 80010f6:	f3bf 8f4f 	dsb	sy
 80010fa:	60bb      	str	r3, [r7, #8]
    }
 80010fc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <vTaskStartScheduler+0xb0>)
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <vTaskStartScheduler+0xb4>)
 8001108:	2201      	movs	r2, #1
 800110a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <vTaskStartScheduler+0xb8>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <vTaskStartScheduler+0xbc>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <vTaskStartScheduler+0xa4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d102      	bne.n	8001124 <vTaskStartScheduler+0x68>
 800111e:	f002 fd7d 	bl	8003c1c <SEGGER_SYSVIEW_OnIdle>
 8001122:	e004      	b.n	800112e <vTaskStartScheduler+0x72>
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <vTaskStartScheduler+0xbc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f002 fdd5 	bl	8003cd8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800112e:	f001 f8f9 	bl	8002324 <xPortStartScheduler>
 8001132:	e00e      	b.n	8001152 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113a:	d10a      	bne.n	8001152 <vTaskStartScheduler+0x96>
        __asm volatile
 800113c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001140:	f383 8811 	msr	BASEPRI, r3
 8001144:	f3bf 8f6f 	isb	sy
 8001148:	f3bf 8f4f 	dsb	sy
 800114c:	607b      	str	r3, [r7, #4]
    }
 800114e:	bf00      	nop
 8001150:	e7fe      	b.n	8001150 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <vTaskStartScheduler+0xc0>)
 8001154:	681b      	ldr	r3, [r3, #0]
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000168 	.word	0x20000168
 8001164:	08004148 	.word	0x08004148
 8001168:	08001a5d 	.word	0x08001a5d
 800116c:	20000164 	.word	0x20000164
 8001170:	20000150 	.word	0x20000150
 8001174:	20000148 	.word	0x20000148
 8001178:	2000006c 	.word	0x2000006c
 800117c:	20000000 	.word	0x20000000

08001180 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <vTaskSuspendAll+0x18>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	4a03      	ldr	r2, [pc, #12]	; (8001198 <vTaskSuspendAll+0x18>)
 800118c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	2000016c 	.word	0x2000016c

0800119c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80011aa:	4b73      	ldr	r3, [pc, #460]	; (8001378 <xTaskResumeAll+0x1dc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10a      	bne.n	80011c8 <xTaskResumeAll+0x2c>
        __asm volatile
 80011b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b6:	f383 8811 	msr	BASEPRI, r3
 80011ba:	f3bf 8f6f 	isb	sy
 80011be:	f3bf 8f4f 	dsb	sy
 80011c2:	607b      	str	r3, [r7, #4]
    }
 80011c4:	bf00      	nop
 80011c6:	e7fe      	b.n	80011c6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80011c8:	f001 f94e 	bl	8002468 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80011cc:	4b6a      	ldr	r3, [pc, #424]	; (8001378 <xTaskResumeAll+0x1dc>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	4a69      	ldr	r2, [pc, #420]	; (8001378 <xTaskResumeAll+0x1dc>)
 80011d4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011d6:	4b68      	ldr	r3, [pc, #416]	; (8001378 <xTaskResumeAll+0x1dc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f040 80c4 	bne.w	8001368 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80011e0:	4b66      	ldr	r3, [pc, #408]	; (800137c <xTaskResumeAll+0x1e0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80bf 	beq.w	8001368 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011ea:	e08e      	b.n	800130a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011ec:	4b64      	ldr	r3, [pc, #400]	; (8001380 <xTaskResumeAll+0x1e4>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	69fa      	ldr	r2, [r7, #28]
 8001200:	6a12      	ldr	r2, [r2, #32]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	69d2      	ldr	r2, [r2, #28]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3318      	adds	r3, #24
 8001216:	429a      	cmp	r2, r3
 8001218:	d103      	bne.n	8001222 <xTaskResumeAll+0x86>
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	6a1a      	ldr	r2, [r3, #32]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	2200      	movs	r2, #0
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	1e5a      	subs	r2, r3, #1
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	68d2      	ldr	r2, [r2, #12]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	6892      	ldr	r2, [r2, #8]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	3304      	adds	r3, #4
 8001254:	429a      	cmp	r2, r3
 8001256:	d103      	bne.n	8001260 <xTaskResumeAll+0xc4>
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1e5a      	subs	r2, r3, #1
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	4618      	mov	r0, r3
 8001274:	f002 fd72 	bl	8003d5c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	2201      	movs	r2, #1
 800127e:	409a      	lsls	r2, r3
 8001280:	4b40      	ldr	r3, [pc, #256]	; (8001384 <xTaskResumeAll+0x1e8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4313      	orrs	r3, r2
 8001286:	4a3f      	ldr	r2, [pc, #252]	; (8001384 <xTaskResumeAll+0x1e8>)
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800128e:	493e      	ldr	r1, [pc, #248]	; (8001388 <xTaskResumeAll+0x1ec>)
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	3304      	adds	r3, #4
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	3204      	adds	r2, #4
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	1d1a      	adds	r2, r3, #4
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4a2e      	ldr	r2, [pc, #184]	; (8001388 <xTaskResumeAll+0x1ec>)
 80012ce:	441a      	add	r2, r3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	615a      	str	r2, [r3, #20]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d8:	492b      	ldr	r1, [pc, #172]	; (8001388 <xTaskResumeAll+0x1ec>)
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	1c59      	adds	r1, r3, #1
 80012e8:	4827      	ldr	r0, [pc, #156]	; (8001388 <xTaskResumeAll+0x1ec>)
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4403      	add	r3, r0
 80012f4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012fa:	4b24      	ldr	r3, [pc, #144]	; (800138c <xTaskResumeAll+0x1f0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	429a      	cmp	r2, r3
 8001302:	d302      	bcc.n	800130a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8001304:	4b22      	ldr	r3, [pc, #136]	; (8001390 <xTaskResumeAll+0x1f4>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <xTaskResumeAll+0x1e4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	f47f af6c 	bne.w	80011ec <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800131a:	f000 fc35 	bl	8001b88 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <xTaskResumeAll+0x1f8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d010      	beq.n	800134c <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800132a:	f000 f847 	bl	80013bc <xTaskIncrementTick>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <xTaskResumeAll+0x1f4>)
 8001336:	2201      	movs	r2, #1
 8001338:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3b01      	subs	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f1      	bne.n	800132a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <xTaskResumeAll+0x1f8>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <xTaskResumeAll+0x1f4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d009      	beq.n	8001368 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001354:	2301      	movs	r3, #1
 8001356:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <xTaskResumeAll+0x1fc>)
 800135a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	f3bf 8f4f 	dsb	sy
 8001364:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001368:	f001 f8ae 	bl	80024c8 <vPortExitCritical>

    return xAlreadyYielded;
 800136c:	69bb      	ldr	r3, [r7, #24]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3720      	adds	r7, #32
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000016c 	.word	0x2000016c
 800137c:	20000144 	.word	0x20000144
 8001380:	20000104 	.word	0x20000104
 8001384:	2000014c 	.word	0x2000014c
 8001388:	20000070 	.word	0x20000070
 800138c:	2000006c 	.word	0x2000006c
 8001390:	20000158 	.word	0x20000158
 8001394:	20000154 	.word	0x20000154
 8001398:	e000ed04 	.word	0xe000ed04

0800139c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <xTaskGetTickCount+0x1c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80013a8:	687b      	ldr	r3, [r7, #4]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000148 	.word	0x20000148

080013bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013c6:	4b7f      	ldr	r3, [pc, #508]	; (80015c4 <xTaskIncrementTick+0x208>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f040 80f0 	bne.w	80015b0 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80013d0:	4b7d      	ldr	r3, [pc, #500]	; (80015c8 <xTaskIncrementTick+0x20c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80013d8:	4a7b      	ldr	r2, [pc, #492]	; (80015c8 <xTaskIncrementTick+0x20c>)
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d120      	bne.n	8001426 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80013e4:	4b79      	ldr	r3, [pc, #484]	; (80015cc <xTaskIncrementTick+0x210>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00a      	beq.n	8001404 <xTaskIncrementTick+0x48>
        __asm volatile
 80013ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013f2:	f383 8811 	msr	BASEPRI, r3
 80013f6:	f3bf 8f6f 	isb	sy
 80013fa:	f3bf 8f4f 	dsb	sy
 80013fe:	607b      	str	r3, [r7, #4]
    }
 8001400:	bf00      	nop
 8001402:	e7fe      	b.n	8001402 <xTaskIncrementTick+0x46>
 8001404:	4b71      	ldr	r3, [pc, #452]	; (80015cc <xTaskIncrementTick+0x210>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	4b71      	ldr	r3, [pc, #452]	; (80015d0 <xTaskIncrementTick+0x214>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a6f      	ldr	r2, [pc, #444]	; (80015cc <xTaskIncrementTick+0x210>)
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4a6f      	ldr	r2, [pc, #444]	; (80015d0 <xTaskIncrementTick+0x214>)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b6e      	ldr	r3, [pc, #440]	; (80015d4 <xTaskIncrementTick+0x218>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	4a6d      	ldr	r2, [pc, #436]	; (80015d4 <xTaskIncrementTick+0x218>)
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	f000 fbb1 	bl	8001b88 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001426:	4b6c      	ldr	r3, [pc, #432]	; (80015d8 <xTaskIncrementTick+0x21c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a3a      	ldr	r2, [r7, #32]
 800142c:	429a      	cmp	r2, r3
 800142e:	f0c0 80aa 	bcc.w	8001586 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001432:	4b66      	ldr	r3, [pc, #408]	; (80015cc <xTaskIncrementTick+0x210>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d104      	bne.n	8001446 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800143c:	4b66      	ldr	r3, [pc, #408]	; (80015d8 <xTaskIncrementTick+0x21c>)
 800143e:	f04f 32ff 	mov.w	r2, #4294967295
 8001442:	601a      	str	r2, [r3, #0]
                    break;
 8001444:	e09f      	b.n	8001586 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001446:	4b61      	ldr	r3, [pc, #388]	; (80015cc <xTaskIncrementTick+0x210>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001456:	6a3a      	ldr	r2, [r7, #32]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	429a      	cmp	r2, r3
 800145c:	d203      	bcs.n	8001466 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800145e:	4a5e      	ldr	r2, [pc, #376]	; (80015d8 <xTaskIncrementTick+0x21c>)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001464:	e08f      	b.n	8001586 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	68d2      	ldr	r2, [r2, #12]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	6892      	ldr	r2, [r2, #8]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	3304      	adds	r3, #4
 8001488:	429a      	cmp	r2, r3
 800148a:	d103      	bne.n	8001494 <xTaskIncrementTick+0xd8>
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	1e5a      	subs	r2, r3, #1
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d01e      	beq.n	80014ea <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	6a12      	ldr	r2, [r2, #32]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	69d2      	ldr	r2, [r2, #28]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	3318      	adds	r3, #24
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d103      	bne.n	80014da <xTaskIncrementTick+0x11e>
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	6a1a      	ldr	r2, [r3, #32]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	2200      	movs	r2, #0
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	1e5a      	subs	r2, r3, #1
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 fc35 	bl	8003d5c <SEGGER_SYSVIEW_OnTaskStartReady>
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	2201      	movs	r2, #1
 80014f8:	409a      	lsls	r2, r3
 80014fa:	4b38      	ldr	r3, [pc, #224]	; (80015dc <xTaskIncrementTick+0x220>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4313      	orrs	r3, r2
 8001500:	4a36      	ldr	r2, [pc, #216]	; (80015dc <xTaskIncrementTick+0x220>)
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001508:	4935      	ldr	r1, [pc, #212]	; (80015e0 <xTaskIncrementTick+0x224>)
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	3304      	adds	r3, #4
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	3204      	adds	r2, #4
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	1d1a      	adds	r2, r3, #4
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <xTaskIncrementTick+0x224>)
 8001548:	441a      	add	r2, r3
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	615a      	str	r2, [r3, #20]
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001552:	4923      	ldr	r1, [pc, #140]	; (80015e0 <xTaskIncrementTick+0x224>)
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	1c59      	adds	r1, r3, #1
 8001562:	481f      	ldr	r0, [pc, #124]	; (80015e0 <xTaskIncrementTick+0x224>)
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4403      	add	r3, r0
 800156e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <xTaskIncrementTick+0x228>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	429a      	cmp	r2, r3
 800157c:	f67f af59 	bls.w	8001432 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001580:	2301      	movs	r3, #1
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001584:	e755      	b.n	8001432 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <xTaskIncrementTick+0x228>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800158c:	4914      	ldr	r1, [pc, #80]	; (80015e0 <xTaskIncrementTick+0x224>)
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d901      	bls.n	80015a2 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800159e:	2301      	movs	r3, #1
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <xTaskIncrementTick+0x22c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80015aa:	2301      	movs	r3, #1
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
 80015ae:	e004      	b.n	80015ba <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <xTaskIncrementTick+0x230>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3301      	adds	r3, #1
 80015b6:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <xTaskIncrementTick+0x230>)
 80015b8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3728      	adds	r7, #40	; 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	2000016c 	.word	0x2000016c
 80015c8:	20000148 	.word	0x20000148
 80015cc:	200000fc 	.word	0x200000fc
 80015d0:	20000100 	.word	0x20000100
 80015d4:	2000015c 	.word	0x2000015c
 80015d8:	20000164 	.word	0x20000164
 80015dc:	2000014c 	.word	0x2000014c
 80015e0:	20000070 	.word	0x20000070
 80015e4:	2000006c 	.word	0x2000006c
 80015e8:	20000158 	.word	0x20000158
 80015ec:	20000154 	.word	0x20000154

080015f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <vTaskSwitchContext+0xbc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80015fe:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <vTaskSwitchContext+0xc0>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001604:	e04d      	b.n	80016a2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8001606:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <vTaskSwitchContext+0xc0>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800160c:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <vTaskSwitchContext+0xc4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	fab3 f383 	clz	r3, r3
 8001618:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800161a:	7afb      	ldrb	r3, [r7, #11]
 800161c:	f1c3 031f 	rsb	r3, r3, #31
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	4925      	ldr	r1, [pc, #148]	; (80016b8 <vTaskSwitchContext+0xc8>)
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10a      	bne.n	800164c <vTaskSwitchContext+0x5c>
        __asm volatile
 8001636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800163a:	f383 8811 	msr	BASEPRI, r3
 800163e:	f3bf 8f6f 	isb	sy
 8001642:	f3bf 8f4f 	dsb	sy
 8001646:	607b      	str	r3, [r7, #4]
    }
 8001648:	bf00      	nop
 800164a:	e7fe      	b.n	800164a <vTaskSwitchContext+0x5a>
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4a18      	ldr	r2, [pc, #96]	; (80016b8 <vTaskSwitchContext+0xc8>)
 8001658:	4413      	add	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	3308      	adds	r3, #8
 800166e:	429a      	cmp	r2, r3
 8001670:	d104      	bne.n	800167c <vTaskSwitchContext+0x8c>
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <vTaskSwitchContext+0xcc>)
 8001684:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <vTaskSwitchContext+0xcc>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <vTaskSwitchContext+0xd0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d102      	bne.n	8001698 <vTaskSwitchContext+0xa8>
 8001692:	f002 fac3 	bl	8003c1c <SEGGER_SYSVIEW_OnIdle>
}
 8001696:	e004      	b.n	80016a2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <vTaskSwitchContext+0xcc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f002 fb1b 	bl	8003cd8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2000016c 	.word	0x2000016c
 80016b0:	20000158 	.word	0x20000158
 80016b4:	2000014c 	.word	0x2000014c
 80016b8:	20000070 	.word	0x20000070
 80016bc:	2000006c 	.word	0x2000006c
 80016c0:	20000168 	.word	0x20000168

080016c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10a      	bne.n	80016ea <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80016d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016d8:	f383 8811 	msr	BASEPRI, r3
 80016dc:	f3bf 8f6f 	isb	sy
 80016e0:	f3bf 8f4f 	dsb	sy
 80016e4:	60fb      	str	r3, [r7, #12]
    }
 80016e6:	bf00      	nop
 80016e8:	e7fe      	b.n	80016e8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <vTaskPlaceOnEventList+0x44>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	3318      	adds	r3, #24
 80016f0:	4619      	mov	r1, r3
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7fe ff8e 	bl	8000614 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80016f8:	2101      	movs	r1, #1
 80016fa:	6838      	ldr	r0, [r7, #0]
 80016fc:	f000 fa7e 	bl	8001bfc <prvAddCurrentTaskToDelayedList>
}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	2000006c 	.word	0x2000006c

0800170c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10a      	bne.n	8001734 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800171e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001722:	f383 8811 	msr	BASEPRI, r3
 8001726:	f3bf 8f6f 	isb	sy
 800172a:	f3bf 8f4f 	dsb	sy
 800172e:	613b      	str	r3, [r7, #16]
    }
 8001730:	bf00      	nop
 8001732:	e7fe      	b.n	8001732 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <vTaskPlaceOnEventListRestricted+0x8c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	61da      	str	r2, [r3, #28]
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	6892      	ldr	r2, [r2, #8]
 800174a:	621a      	str	r2, [r3, #32]
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <vTaskPlaceOnEventListRestricted+0x8c>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	3218      	adds	r2, #24
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <vTaskPlaceOnEventListRestricted+0x8c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f103 0218 	add.w	r2, r3, #24
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
 8001780:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001782:	2024      	movs	r0, #36	; 0x24
 8001784:	f001 fd6e 	bl	8003264 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	68b8      	ldr	r0, [r7, #8]
 800178c:	f000 fa36 	bl	8001bfc <prvAddCurrentTaskToDelayedList>
    }
 8001790:	bf00      	nop
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2000006c 	.word	0x2000006c

0800179c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10a      	bne.n	80017c8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80017b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b6:	f383 8811 	msr	BASEPRI, r3
 80017ba:	f3bf 8f6f 	isb	sy
 80017be:	f3bf 8f4f 	dsb	sy
 80017c2:	60fb      	str	r3, [r7, #12]
    }
 80017c4:	bf00      	nop
 80017c6:	e7fe      	b.n	80017c6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	6a3a      	ldr	r2, [r7, #32]
 80017d4:	6a12      	ldr	r2, [r2, #32]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	6a3a      	ldr	r2, [r7, #32]
 80017de:	69d2      	ldr	r2, [r2, #28]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	3318      	adds	r3, #24
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d103      	bne.n	80017f6 <xTaskRemoveFromEventList+0x5a>
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	6a1a      	ldr	r2, [r3, #32]
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	2200      	movs	r2, #0
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	1e5a      	subs	r2, r3, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001806:	4b4b      	ldr	r3, [pc, #300]	; (8001934 <xTaskRemoveFromEventList+0x198>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d162      	bne.n	80018d4 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	6a3a      	ldr	r2, [r7, #32]
 800181a:	68d2      	ldr	r2, [r2, #12]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	6a3a      	ldr	r2, [r7, #32]
 8001824:	6892      	ldr	r2, [r2, #8]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	3304      	adds	r3, #4
 8001830:	429a      	cmp	r2, r3
 8001832:	d103      	bne.n	800183c <xTaskRemoveFromEventList+0xa0>
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	2200      	movs	r2, #0
 8001840:	615a      	str	r2, [r3, #20]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	1e5a      	subs	r2, r3, #1
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	4618      	mov	r0, r3
 8001850:	f002 fa84 	bl	8003d5c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	2201      	movs	r2, #1
 800185a:	409a      	lsls	r2, r3
 800185c:	4b36      	ldr	r3, [pc, #216]	; (8001938 <xTaskRemoveFromEventList+0x19c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4313      	orrs	r3, r2
 8001862:	4a35      	ldr	r2, [pc, #212]	; (8001938 <xTaskRemoveFromEventList+0x19c>)
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186a:	4934      	ldr	r1, [pc, #208]	; (800193c <xTaskRemoveFromEventList+0x1a0>)
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	3304      	adds	r3, #4
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	6a3a      	ldr	r2, [r7, #32]
 8001890:	3204      	adds	r2, #4
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	1d1a      	adds	r2, r3, #4
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4a24      	ldr	r2, [pc, #144]	; (800193c <xTaskRemoveFromEventList+0x1a0>)
 80018aa:	441a      	add	r2, r3
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	615a      	str	r2, [r3, #20]
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b4:	4921      	ldr	r1, [pc, #132]	; (800193c <xTaskRemoveFromEventList+0x1a0>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	1c59      	adds	r1, r3, #1
 80018c4:	481d      	ldr	r0, [pc, #116]	; (800193c <xTaskRemoveFromEventList+0x1a0>)
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4403      	add	r3, r0
 80018d0:	6019      	str	r1, [r3, #0]
 80018d2:	e01b      	b.n	800190c <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <xTaskRemoveFromEventList+0x1a4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	61da      	str	r2, [r3, #28]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	621a      	str	r2, [r3, #32]
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	6a3a      	ldr	r2, [r7, #32]
 80018ee:	3218      	adds	r2, #24
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	f103 0218 	add.w	r2, r3, #24
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	4a10      	ldr	r2, [pc, #64]	; (8001940 <xTaskRemoveFromEventList+0x1a4>)
 8001900:	629a      	str	r2, [r3, #40]	; 0x28
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <xTaskRemoveFromEventList+0x1a4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <xTaskRemoveFromEventList+0x1a4>)
 800190a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <xTaskRemoveFromEventList+0x1a8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	429a      	cmp	r2, r3
 8001918:	d905      	bls.n	8001926 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800191a:	2301      	movs	r3, #1
 800191c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <xTaskRemoveFromEventList+0x1ac>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e001      	b.n	800192a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800192c:	4618      	mov	r0, r3
 800192e:	3728      	adds	r7, #40	; 0x28
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	2000016c 	.word	0x2000016c
 8001938:	2000014c 	.word	0x2000014c
 800193c:	20000070 	.word	0x20000070
 8001940:	20000104 	.word	0x20000104
 8001944:	2000006c 	.word	0x2000006c
 8001948:	20000158 	.word	0x20000158

0800194c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <vTaskInternalSetTimeOutState+0x24>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <vTaskInternalSetTimeOutState+0x28>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	605a      	str	r2, [r3, #4]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	2000015c 	.word	0x2000015c
 8001974:	20000148 	.word	0x20000148

08001978 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10a      	bne.n	800199e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800198c:	f383 8811 	msr	BASEPRI, r3
 8001990:	f3bf 8f6f 	isb	sy
 8001994:	f3bf 8f4f 	dsb	sy
 8001998:	613b      	str	r3, [r7, #16]
    }
 800199a:	bf00      	nop
 800199c:	e7fe      	b.n	800199c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10a      	bne.n	80019ba <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80019a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a8:	f383 8811 	msr	BASEPRI, r3
 80019ac:	f3bf 8f6f 	isb	sy
 80019b0:	f3bf 8f4f 	dsb	sy
 80019b4:	60fb      	str	r3, [r7, #12]
    }
 80019b6:	bf00      	nop
 80019b8:	e7fe      	b.n	80019b8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80019ba:	f000 fd55 	bl	8002468 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <xTaskCheckForTimeOut+0xc4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d6:	d102      	bne.n	80019de <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	e026      	b.n	8001a2c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <xTaskCheckForTimeOut+0xc8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d00a      	beq.n	8001a00 <xTaskCheckForTimeOut+0x88>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d305      	bcc.n	8001a00 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80019f4:	2301      	movs	r3, #1
 80019f6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e015      	b.n	8001a2c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d20b      	bcs.n	8001a22 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	1ad2      	subs	r2, r2, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ff98 	bl	800194c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	e004      	b.n	8001a2c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001a2c:	f000 fd4c 	bl	80024c8 <vPortExitCritical>

    return xReturn;
 8001a30:	69fb      	ldr	r3, [r7, #28]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000148 	.word	0x20000148
 8001a40:	2000015c 	.word	0x2000015c

08001a44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <vTaskMissedYield+0x14>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	20000158 	.word	0x20000158

08001a5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001a64:	f000 f852 	bl	8001b0c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <prvIdleTask+0x28>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d9f9      	bls.n	8001a64 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <prvIdleTask+0x2c>)
 8001a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	f3bf 8f4f 	dsb	sy
 8001a7c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001a80:	e7f0      	b.n	8001a64 <prvIdleTask+0x8>
 8001a82:	bf00      	nop
 8001a84:	20000070 	.word	0x20000070
 8001a88:	e000ed04 	.word	0xe000ed04

08001a8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	e00c      	b.n	8001ab2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <prvInitialiseTaskLists+0x60>)
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fd87 	bl	80005ba <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d9ef      	bls.n	8001a98 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001ab8:	480d      	ldr	r0, [pc, #52]	; (8001af0 <prvInitialiseTaskLists+0x64>)
 8001aba:	f7fe fd7e 	bl	80005ba <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001abe:	480d      	ldr	r0, [pc, #52]	; (8001af4 <prvInitialiseTaskLists+0x68>)
 8001ac0:	f7fe fd7b 	bl	80005ba <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <prvInitialiseTaskLists+0x6c>)
 8001ac6:	f7fe fd78 	bl	80005ba <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001aca:	480c      	ldr	r0, [pc, #48]	; (8001afc <prvInitialiseTaskLists+0x70>)
 8001acc:	f7fe fd75 	bl	80005ba <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001ad0:	480b      	ldr	r0, [pc, #44]	; (8001b00 <prvInitialiseTaskLists+0x74>)
 8001ad2:	f7fe fd72 	bl	80005ba <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <prvInitialiseTaskLists+0x78>)
 8001ad8:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <prvInitialiseTaskLists+0x64>)
 8001ada:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <prvInitialiseTaskLists+0x7c>)
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <prvInitialiseTaskLists+0x68>)
 8001ae0:	601a      	str	r2, [r3, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000070 	.word	0x20000070
 8001af0:	200000d4 	.word	0x200000d4
 8001af4:	200000e8 	.word	0x200000e8
 8001af8:	20000104 	.word	0x20000104
 8001afc:	20000118 	.word	0x20000118
 8001b00:	20000130 	.word	0x20000130
 8001b04:	200000fc 	.word	0x200000fc
 8001b08:	20000100 	.word	0x20000100

08001b0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b12:	e019      	b.n	8001b48 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001b14:	f000 fca8 	bl	8002468 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b18:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <prvCheckTasksWaitingTermination+0x50>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3304      	adds	r3, #4
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fdae 	bl	8000686 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <prvCheckTasksWaitingTermination+0x54>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <prvCheckTasksWaitingTermination+0x54>)
 8001b32:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <prvCheckTasksWaitingTermination+0x58>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <prvCheckTasksWaitingTermination+0x58>)
 8001b3c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001b3e:	f000 fcc3 	bl	80024c8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f810 	bl	8001b68 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <prvCheckTasksWaitingTermination+0x58>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1e1      	bne.n	8001b14 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000118 	.word	0x20000118
 8001b60:	20000144 	.word	0x20000144
 8001b64:	2000012c 	.word	0x2000012c

08001b68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 fe11 	bl	800279c <vPortFree>
            vPortFree( pxTCB );
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fe0e 	bl	800279c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <prvResetNextTaskUnblockTime+0x30>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d104      	bne.n	8001ba0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <prvResetNextTaskUnblockTime+0x34>)
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001b9e:	e005      	b.n	8001bac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <prvResetNextTaskUnblockTime+0x30>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <prvResetNextTaskUnblockTime+0x34>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	200000fc 	.word	0x200000fc
 8001bbc:	20000164 	.word	0x20000164

08001bc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <xTaskGetSchedulerState+0x34>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	e008      	b.n	8001be6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <xTaskGetSchedulerState+0x38>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	e001      	b.n	8001be6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001be6:	687b      	ldr	r3, [r7, #4]
    }
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	20000150 	.word	0x20000150
 8001bf8:	2000016c 	.word	0x2000016c

08001bfc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001c06:	4b36      	ldr	r3, [pc, #216]	; (8001ce0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c0c:	4b35      	ldr	r3, [pc, #212]	; (8001ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3304      	adds	r3, #4
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fd37 	bl	8000686 <uxListRemove>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10b      	bne.n	8001c36 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001c1e:	4b31      	ldr	r3, [pc, #196]	; (8001ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	2201      	movs	r2, #1
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <prvAddCurrentTaskToDelayedList+0xec>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4013      	ands	r3, r2
 8001c32:	4a2d      	ldr	r2, [pc, #180]	; (8001ce8 <prvAddCurrentTaskToDelayedList+0xec>)
 8001c34:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d124      	bne.n	8001c88 <prvAddCurrentTaskToDelayedList+0x8c>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d021      	beq.n	8001c88 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c44:	4b29      	ldr	r3, [pc, #164]	; (8001cec <prvAddCurrentTaskToDelayedList+0xf0>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	6892      	ldr	r2, [r2, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	3204      	adds	r2, #4
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	1d1a      	adds	r2, r3, #4
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <prvAddCurrentTaskToDelayedList+0xf0>)
 8001c78:	615a      	str	r2, [r3, #20]
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <prvAddCurrentTaskToDelayedList+0xf0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	4a1a      	ldr	r2, [pc, #104]	; (8001cec <prvAddCurrentTaskToDelayedList+0xf0>)
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001c86:	e026      	b.n	8001cd6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d209      	bcs.n	8001cb4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	4610      	mov	r0, r2
 8001cae:	f7fe fcb1 	bl	8000614 <vListInsert>
}
 8001cb2:	e010      	b.n	8001cd6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	f7fe fca7 	bl	8000614 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d202      	bcs.n	8001cd6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001cd0:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6013      	str	r3, [r2, #0]
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000148 	.word	0x20000148
 8001ce4:	2000006c 	.word	0x2000006c
 8001ce8:	2000014c 	.word	0x2000014c
 8001cec:	20000130 	.word	0x20000130
 8001cf0:	20000100 	.word	0x20000100
 8001cf4:	200000fc 	.word	0x200000fc
 8001cf8:	20000164 	.word	0x20000164

08001cfc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001d06:	f000 fa47 	bl	8002198 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <xTimerCreateTimerTask+0x54>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <xTimerCreateTimerTask+0x58>)
 8001d14:	9301      	str	r3, [sp, #4]
 8001d16:	2302      	movs	r3, #2
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d20:	490d      	ldr	r1, [pc, #52]	; (8001d58 <xTimerCreateTimerTask+0x5c>)
 8001d22:	480e      	ldr	r0, [pc, #56]	; (8001d5c <xTimerCreateTimerTask+0x60>)
 8001d24:	f7ff f80a 	bl	8000d3c <xTaskCreate>
 8001d28:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10a      	bne.n	8001d46 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d34:	f383 8811 	msr	BASEPRI, r3
 8001d38:	f3bf 8f6f 	isb	sy
 8001d3c:	f3bf 8f4f 	dsb	sy
 8001d40:	603b      	str	r3, [r7, #0]
    }
 8001d42:	bf00      	nop
 8001d44:	e7fe      	b.n	8001d44 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001d46:	687b      	ldr	r3, [r7, #4]
    }
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200001a0 	.word	0x200001a0
 8001d54:	200001a4 	.word	0x200001a4
 8001d58:	08004150 	.word	0x08004150
 8001d5c:	08001e05 	.word	0x08001e05

08001d60 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001d6c:	e008      	b.n	8001d80 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	4413      	add	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	18d1      	adds	r1, r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f8dd 	bl	8001f4c <prvInsertTimerInActiveList>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1ea      	bne.n	8001d6e <prvReloadTimer+0xe>
        }
    }
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <prvProcessExpiredTimer+0x5c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fc62 	bl	8000686 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f7ff ffc3 	bl	8001d60 <prvReloadTimer>
 8001dda:	e008      	b.n	8001dee <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001de2:	f023 0301 	bic.w	r3, r3, #1
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	4798      	blx	r3
    }
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000198 	.word	0x20000198

08001e04 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001e0c:	f107 0308 	add.w	r3, r7, #8
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 f857 	bl	8001ec4 <prvGetNextExpireTime>
 8001e16:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 f803 	bl	8001e28 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001e22:	f000 f8d5 	bl	8001fd0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001e26:	e7f1      	b.n	8001e0c <prvTimerTask+0x8>

08001e28 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001e32:	f7ff f9a5 	bl	8001180 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001e36:	f107 0308 	add.w	r3, r7, #8
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f866 	bl	8001f0c <prvSampleTimeNow>
 8001e40:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d130      	bne.n	8001eaa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10a      	bne.n	8001e64 <prvProcessTimerOrBlockTask+0x3c>
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d806      	bhi.n	8001e64 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001e56:	f7ff f9a1 	bl	800119c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001e5a:	68f9      	ldr	r1, [r7, #12]
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ffa1 	bl	8001da4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001e62:	e024      	b.n	8001eae <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d008      	beq.n	8001e7c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001e6a:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <prvProcessTimerOrBlockTask+0x90>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <prvProcessTimerOrBlockTask+0x50>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <prvProcessTimerOrBlockTask+0x52>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <prvProcessTimerOrBlockTask+0x94>)
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f7fe ff23 	bl	8000cd4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001e8e:	f7ff f985 	bl	800119c <xTaskResumeAll>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10a      	bne.n	8001eae <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <prvProcessTimerOrBlockTask+0x98>)
 8001e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	f3bf 8f4f 	dsb	sy
 8001ea4:	f3bf 8f6f 	isb	sy
    }
 8001ea8:	e001      	b.n	8001eae <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001eaa:	f7ff f977 	bl	800119c <xTaskResumeAll>
    }
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2000019c 	.word	0x2000019c
 8001ebc:	200001a0 	.word	0x200001a0
 8001ec0:	e000ed04 	.word	0xe000ed04

08001ec4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <prvGetNextExpireTime+0x44>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <prvGetNextExpireTime+0x16>
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	e000      	b.n	8001edc <prvGetNextExpireTime+0x18>
 8001eda:	2200      	movs	r2, #0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <prvGetNextExpireTime+0x44>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e001      	b.n	8001ef8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
    }
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000198 	.word	0x20000198

08001f0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001f14:	f7ff fa42 	bl	800139c <xTaskGetTickCount>
 8001f18:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <prvSampleTimeNow+0x3c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d205      	bcs.n	8001f30 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001f24:	f000 f912 	bl	800214c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e002      	b.n	8001f36 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001f36:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <prvSampleTimeNow+0x3c>)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    }
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200001a8 	.word	0x200001a8

08001f4c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d812      	bhi.n	8001f98 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	1ad2      	subs	r2, r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d302      	bcc.n	8001f86 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	e01b      	b.n	8001fbe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <prvInsertTimerInActiveList+0x7c>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4610      	mov	r0, r2
 8001f92:	f7fe fb3f 	bl	8000614 <vListInsert>
 8001f96:	e012      	b.n	8001fbe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d206      	bcs.n	8001fae <prvInsertTimerInActiveList+0x62>
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d302      	bcc.n	8001fae <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	e007      	b.n	8001fbe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <prvInsertTimerInActiveList+0x80>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4610      	mov	r0, r2
 8001fba:	f7fe fb2b 	bl	8000614 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001fbe:	697b      	ldr	r3, [r7, #20]
    }
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	2000019c 	.word	0x2000019c
 8001fcc:	20000198 	.word	0x20000198

08001fd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001fd6:	e0a6      	b.n	8002126 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f2c0 80a3 	blt.w	8002126 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d004      	beq.n	8001ff6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fb48 	bl	8000686 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff87 	bl	8001f0c <prvSampleTimeNow>
 8001ffe:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3b01      	subs	r3, #1
 8002004:	2b08      	cmp	r3, #8
 8002006:	f200 808d 	bhi.w	8002124 <prvProcessReceivedCommands+0x154>
 800200a:	a201      	add	r2, pc, #4	; (adr r2, 8002010 <prvProcessReceivedCommands+0x40>)
 800200c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002010:	08002035 	.word	0x08002035
 8002014:	08002035 	.word	0x08002035
 8002018:	0800209d 	.word	0x0800209d
 800201c:	080020b1 	.word	0x080020b1
 8002020:	080020fb 	.word	0x080020fb
 8002024:	08002035 	.word	0x08002035
 8002028:	08002035 	.word	0x08002035
 800202c:	0800209d 	.word	0x0800209d
 8002030:	080020b1 	.word	0x080020b1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	18d1      	adds	r1, r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	69f8      	ldr	r0, [r7, #28]
 8002054:	f7ff ff7a 	bl	8001f4c <prvInsertTimerInActiveList>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d063      	beq.n	8002126 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d009      	beq.n	8002080 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	4413      	add	r3, r2
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4619      	mov	r1, r3
 8002078:	69f8      	ldr	r0, [r7, #28]
 800207a:	f7ff fe71 	bl	8001d60 <prvReloadTimer>
 800207e:	e008      	b.n	8002092 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002086:	f023 0301 	bic.w	r3, r3, #1
 800208a:	b2da      	uxtb	r2, r3
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	69f8      	ldr	r0, [r7, #28]
 8002098:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800209a:	e044      	b.n	8002126 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80020ae:	e03a      	b.n	8002126 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10a      	bne.n	80020e6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80020d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d4:	f383 8811 	msr	BASEPRI, r3
 80020d8:	f3bf 8f6f 	isb	sy
 80020dc:	f3bf 8f4f 	dsb	sy
 80020e0:	617b      	str	r3, [r7, #20]
    }
 80020e2:	bf00      	nop
 80020e4:	e7fe      	b.n	80020e4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	18d1      	adds	r1, r2, r3
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	69f8      	ldr	r0, [r7, #28]
 80020f4:	f7ff ff2a 	bl	8001f4c <prvInsertTimerInActiveList>
                        break;
 80020f8:	e015      	b.n	8002126 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8002108:	69f8      	ldr	r0, [r7, #28]
 800210a:	f000 fb47 	bl	800279c <vPortFree>
 800210e:	e00a      	b.n	8002126 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	b2da      	uxtb	r2, r3
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002122:	e000      	b.n	8002126 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002124:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <prvProcessReceivedCommands+0x178>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f107 0108 	add.w	r1, r7, #8
 800212e:	2200      	movs	r2, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fbdb 	bl	80008ec <xQueueReceive>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	f47f af4d 	bne.w	8001fd8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	200001a0 	.word	0x200001a0

0800214c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002152:	e009      	b.n	8002168 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <prvSwitchTimerLists+0x44>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800215e:	f04f 31ff 	mov.w	r1, #4294967295
 8002162:	6838      	ldr	r0, [r7, #0]
 8002164:	f7ff fe1e 	bl	8001da4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <prvSwitchTimerLists+0x44>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002172:	4b07      	ldr	r3, [pc, #28]	; (8002190 <prvSwitchTimerLists+0x44>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <prvSwitchTimerLists+0x48>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <prvSwitchTimerLists+0x44>)
 800217e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002180:	4a04      	ldr	r2, [pc, #16]	; (8002194 <prvSwitchTimerLists+0x48>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6013      	str	r3, [r2, #0]
    }
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000198 	.word	0x20000198
 8002194:	2000019c 	.word	0x2000019c

08002198 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800219c:	f000 f964 	bl	8002468 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <prvCheckForValidListAndQueue+0x54>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d11d      	bne.n	80021e4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80021a8:	4811      	ldr	r0, [pc, #68]	; (80021f0 <prvCheckForValidListAndQueue+0x58>)
 80021aa:	f7fe fa06 	bl	80005ba <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80021ae:	4811      	ldr	r0, [pc, #68]	; (80021f4 <prvCheckForValidListAndQueue+0x5c>)
 80021b0:	f7fe fa03 	bl	80005ba <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80021b4:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <prvCheckForValidListAndQueue+0x60>)
 80021b6:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <prvCheckForValidListAndQueue+0x58>)
 80021b8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <prvCheckForValidListAndQueue+0x64>)
 80021bc:	4a0d      	ldr	r2, [pc, #52]	; (80021f4 <prvCheckForValidListAndQueue+0x5c>)
 80021be:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80021c0:	2200      	movs	r2, #0
 80021c2:	210c      	movs	r1, #12
 80021c4:	200a      	movs	r0, #10
 80021c6:	f7fe fb19 	bl	80007fc <xQueueGenericCreate>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <prvCheckForValidListAndQueue+0x54>)
 80021ce:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <prvCheckForValidListAndQueue+0x54>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <prvCheckForValidListAndQueue+0x54>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4908      	ldr	r1, [pc, #32]	; (8002200 <prvCheckForValidListAndQueue+0x68>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fd22 	bl	8000c28 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80021e4:	f000 f970 	bl	80024c8 <vPortExitCritical>
    }
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	200001a0 	.word	0x200001a0
 80021f0:	20000170 	.word	0x20000170
 80021f4:	20000184 	.word	0x20000184
 80021f8:	20000198 	.word	0x20000198
 80021fc:	2000019c 	.word	0x2000019c
 8002200:	08004158 	.word	0x08004158

08002204 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3b04      	subs	r3, #4
 8002214:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800221c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3b04      	subs	r3, #4
 8002222:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f023 0201 	bic.w	r2, r3, #1
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3b04      	subs	r3, #4
 8002232:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002234:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <pxPortInitialiseStack+0x64>)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3b14      	subs	r3, #20
 800223e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3b04      	subs	r3, #4
 800224a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f06f 0202 	mvn.w	r2, #2
 8002252:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3b20      	subs	r3, #32
 8002258:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800225a:	68fb      	ldr	r3, [r7, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	0800226d 	.word	0x0800226d

0800226c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <prvTaskExitError+0x54>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227e:	d00a      	beq.n	8002296 <prvTaskExitError+0x2a>
        __asm volatile
 8002280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	60fb      	str	r3, [r7, #12]
    }
 8002292:	bf00      	nop
 8002294:	e7fe      	b.n	8002294 <prvTaskExitError+0x28>
        __asm volatile
 8002296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229a:	f383 8811 	msr	BASEPRI, r3
 800229e:	f3bf 8f6f 	isb	sy
 80022a2:	f3bf 8f4f 	dsb	sy
 80022a6:	60bb      	str	r3, [r7, #8]
    }
 80022a8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80022aa:	bf00      	nop
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0fc      	beq.n	80022ac <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	20000004 	.word	0x20000004
	...

080022d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <pxCurrentTCBConst2>)
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	6808      	ldr	r0, [r1, #0]
 80022d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022da:	f380 8809 	msr	PSP, r0
 80022de:	f3bf 8f6f 	isb	sy
 80022e2:	f04f 0000 	mov.w	r0, #0
 80022e6:	f380 8811 	msr	BASEPRI, r0
 80022ea:	4770      	bx	lr
 80022ec:	f3af 8000 	nop.w

080022f0 <pxCurrentTCBConst2>:
 80022f0:	2000006c 	.word	0x2000006c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop

080022f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80022f8:	4808      	ldr	r0, [pc, #32]	; (800231c <prvPortStartFirstTask+0x24>)
 80022fa:	6800      	ldr	r0, [r0, #0]
 80022fc:	6800      	ldr	r0, [r0, #0]
 80022fe:	f380 8808 	msr	MSP, r0
 8002302:	f04f 0000 	mov.w	r0, #0
 8002306:	f380 8814 	msr	CONTROL, r0
 800230a:	b662      	cpsie	i
 800230c:	b661      	cpsie	f
 800230e:	f3bf 8f4f 	dsb	sy
 8002312:	f3bf 8f6f 	isb	sy
 8002316:	df00      	svc	0
 8002318:	bf00      	nop
 800231a:	0000      	.short	0x0000
 800231c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop

08002324 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800232a:	4b46      	ldr	r3, [pc, #280]	; (8002444 <xPortStartScheduler+0x120>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a46      	ldr	r2, [pc, #280]	; (8002448 <xPortStartScheduler+0x124>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d10a      	bne.n	800234a <xPortStartScheduler+0x26>
        __asm volatile
 8002334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002338:	f383 8811 	msr	BASEPRI, r3
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	613b      	str	r3, [r7, #16]
    }
 8002346:	bf00      	nop
 8002348:	e7fe      	b.n	8002348 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800234a:	4b3e      	ldr	r3, [pc, #248]	; (8002444 <xPortStartScheduler+0x120>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a3f      	ldr	r2, [pc, #252]	; (800244c <xPortStartScheduler+0x128>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d10a      	bne.n	800236a <xPortStartScheduler+0x46>
        __asm volatile
 8002354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	60fb      	str	r3, [r7, #12]
    }
 8002366:	bf00      	nop
 8002368:	e7fe      	b.n	8002368 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800236a:	4b39      	ldr	r3, [pc, #228]	; (8002450 <xPortStartScheduler+0x12c>)
 800236c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	22ff      	movs	r2, #255	; 0xff
 800237a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4b31      	ldr	r3, [pc, #196]	; (8002454 <xPortStartScheduler+0x130>)
 8002390:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002392:	4b31      	ldr	r3, [pc, #196]	; (8002458 <xPortStartScheduler+0x134>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002398:	e009      	b.n	80023ae <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800239a:	4b2f      	ldr	r3, [pc, #188]	; (8002458 <xPortStartScheduler+0x134>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3b01      	subs	r3, #1
 80023a0:	4a2d      	ldr	r2, [pc, #180]	; (8002458 <xPortStartScheduler+0x134>)
 80023a2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b6:	2b80      	cmp	r3, #128	; 0x80
 80023b8:	d0ef      	beq.n	800239a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80023ba:	4b27      	ldr	r3, [pc, #156]	; (8002458 <xPortStartScheduler+0x134>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f1c3 0307 	rsb	r3, r3, #7
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d00a      	beq.n	80023dc <xPortStartScheduler+0xb8>
        __asm volatile
 80023c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ca:	f383 8811 	msr	BASEPRI, r3
 80023ce:	f3bf 8f6f 	isb	sy
 80023d2:	f3bf 8f4f 	dsb	sy
 80023d6:	60bb      	str	r3, [r7, #8]
    }
 80023d8:	bf00      	nop
 80023da:	e7fe      	b.n	80023da <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80023dc:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <xPortStartScheduler+0x134>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <xPortStartScheduler+0x134>)
 80023e4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <xPortStartScheduler+0x134>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023ee:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <xPortStartScheduler+0x134>)
 80023f0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <xPortStartScheduler+0x138>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a17      	ldr	r2, [pc, #92]	; (800245c <xPortStartScheduler+0x138>)
 8002400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002404:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <xPortStartScheduler+0x138>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a14      	ldr	r2, [pc, #80]	; (800245c <xPortStartScheduler+0x138>)
 800240c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002410:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002412:	f000 f8e3 	bl	80025dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <xPortStartScheduler+0x13c>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800241c:	f000 f8f8 	bl	8002610 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002420:	4b10      	ldr	r3, [pc, #64]	; (8002464 <xPortStartScheduler+0x140>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0f      	ldr	r2, [pc, #60]	; (8002464 <xPortStartScheduler+0x140>)
 8002426:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800242a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800242c:	f7ff ff64 	bl	80022f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002430:	f7ff f8de 	bl	80015f0 <vTaskSwitchContext>
    prvTaskExitError();
 8002434:	f7ff ff1a 	bl	800226c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00
 8002448:	410fc271 	.word	0x410fc271
 800244c:	410fc270 	.word	0x410fc270
 8002450:	e000e400 	.word	0xe000e400
 8002454:	200001ac 	.word	0x200001ac
 8002458:	200001b0 	.word	0x200001b0
 800245c:	e000ed20 	.word	0xe000ed20
 8002460:	20000004 	.word	0x20000004
 8002464:	e000ef34 	.word	0xe000ef34

08002468 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
        __asm volatile
 800246e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002472:	f383 8811 	msr	BASEPRI, r3
 8002476:	f3bf 8f6f 	isb	sy
 800247a:	f3bf 8f4f 	dsb	sy
 800247e:	607b      	str	r3, [r7, #4]
    }
 8002480:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002482:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <vPortEnterCritical+0x58>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <vPortEnterCritical+0x58>)
 800248a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <vPortEnterCritical+0x58>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d10f      	bne.n	80024b4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <vPortEnterCritical+0x5c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <vPortEnterCritical+0x4c>
        __asm volatile
 800249e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a2:	f383 8811 	msr	BASEPRI, r3
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	603b      	str	r3, [r7, #0]
    }
 80024b0:	bf00      	nop
 80024b2:	e7fe      	b.n	80024b2 <vPortEnterCritical+0x4a>
    }
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	20000004 	.word	0x20000004
 80024c4:	e000ed04 	.word	0xe000ed04

080024c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <vPortExitCritical+0x50>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10a      	bne.n	80024ec <vPortExitCritical+0x24>
        __asm volatile
 80024d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	607b      	str	r3, [r7, #4]
    }
 80024e8:	bf00      	nop
 80024ea:	e7fe      	b.n	80024ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <vPortExitCritical+0x50>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	4a09      	ldr	r2, [pc, #36]	; (8002518 <vPortExitCritical+0x50>)
 80024f4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <vPortExitCritical+0x50>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d105      	bne.n	800250a <vPortExitCritical+0x42>
 80024fe:	2300      	movs	r3, #0
 8002500:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002508:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000004 	.word	0x20000004
 800251c:	00000000 	.word	0x00000000

08002520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002520:	f3ef 8009 	mrs	r0, PSP
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <pxCurrentTCBConst>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	f01e 0f10 	tst.w	lr, #16
 8002530:	bf08      	it	eq
 8002532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800253a:	6010      	str	r0, [r2, #0]
 800253c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002544:	f380 8811 	msr	BASEPRI, r0
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f7ff f84e 	bl	80015f0 <vTaskSwitchContext>
 8002554:	f04f 0000 	mov.w	r0, #0
 8002558:	f380 8811 	msr	BASEPRI, r0
 800255c:	bc09      	pop	{r0, r3}
 800255e:	6819      	ldr	r1, [r3, #0]
 8002560:	6808      	ldr	r0, [r1, #0]
 8002562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002566:	f01e 0f10 	tst.w	lr, #16
 800256a:	bf08      	it	eq
 800256c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002570:	f380 8809 	msr	PSP, r0
 8002574:	f3bf 8f6f 	isb	sy
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	f3af 8000 	nop.w

08002580 <pxCurrentTCBConst>:
 8002580:	2000006c 	.word	0x2000006c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop

08002588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
        __asm volatile
 800258e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	607b      	str	r3, [r7, #4]
    }
 80025a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80025a2:	f001 fac1 	bl	8003b28 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80025a6:	f7fe ff09 	bl	80013bc <xTaskIncrementTick>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d006      	beq.n	80025be <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80025b0:	f001 fb18 	bl	8003be4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <SysTick_Handler+0x50>)
 80025b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	e001      	b.n	80025c2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80025be:	f001 faf5 	bl	8003bac <SEGGER_SYSVIEW_RecordExitISR>
 80025c2:	2300      	movs	r3, #0
 80025c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	f383 8811 	msr	BASEPRI, r3
    }
 80025cc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	e000ed04 	.word	0xe000ed04

080025dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <vPortSetupTimerInterrupt+0x28>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <vPortSetupTimerInterrupt+0x2c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <vPortSetupTimerInterrupt+0x30>)
 80025ee:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80025f2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <vPortSetupTimerInterrupt+0x28>)
 80025f6:	2207      	movs	r2, #7
 80025f8:	601a      	str	r2, [r3, #0]
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000e010 	.word	0xe000e010
 8002608:	e000e018 	.word	0xe000e018
 800260c:	e000e014 	.word	0xe000e014

08002610 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002610:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002620 <vPortEnableVFP+0x10>
 8002614:	6801      	ldr	r1, [r0, #0]
 8002616:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800261a:	6001      	str	r1, [r0, #0]
 800261c:	4770      	bx	lr
 800261e:	0000      	.short	0x0000
 8002620:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop

08002628 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	; 0x28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002634:	f7fe fda4 	bl	8001180 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002638:	4b53      	ldr	r3, [pc, #332]	; (8002788 <pvPortMalloc+0x160>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002640:	f000 f908 	bl	8002854 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d012      	beq.n	8002670 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800264a:	2208      	movs	r2, #8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	3308      	adds	r3, #8
 8002656:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	43db      	mvns	r3, r3
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	429a      	cmp	r2, r3
 8002660:	d804      	bhi.n	800266c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4413      	add	r3, r2
 8002668:	607b      	str	r3, [r7, #4]
 800266a:	e001      	b.n	8002670 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	db70      	blt.n	8002758 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d06d      	beq.n	8002758 <pvPortMalloc+0x130>
 800267c:	4b43      	ldr	r3, [pc, #268]	; (800278c <pvPortMalloc+0x164>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	429a      	cmp	r2, r3
 8002684:	d868      	bhi.n	8002758 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002686:	4b42      	ldr	r3, [pc, #264]	; (8002790 <pvPortMalloc+0x168>)
 8002688:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800268a:	4b41      	ldr	r3, [pc, #260]	; (8002790 <pvPortMalloc+0x168>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002690:	e004      	b.n	800269c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d903      	bls.n	80026ae <pvPortMalloc+0x86>
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f1      	bne.n	8002692 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80026ae:	4b36      	ldr	r3, [pc, #216]	; (8002788 <pvPortMalloc+0x160>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d04f      	beq.n	8002758 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2208      	movs	r2, #8
 80026be:	4413      	add	r3, r2
 80026c0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	1ad2      	subs	r2, r2, r3
 80026d2:	2308      	movs	r3, #8
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d91f      	bls.n	800271a <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80026da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4413      	add	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <pvPortMalloc+0xda>
        __asm volatile
 80026ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f0:	f383 8811 	msr	BASEPRI, r3
 80026f4:	f3bf 8f6f 	isb	sy
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	613b      	str	r3, [r7, #16]
    }
 80026fe:	bf00      	nop
 8002700:	e7fe      	b.n	8002700 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	1ad2      	subs	r2, r2, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002714:	6978      	ldr	r0, [r7, #20]
 8002716:	f000 f8f9 	bl	800290c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800271a:	4b1c      	ldr	r3, [pc, #112]	; (800278c <pvPortMalloc+0x164>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	4a19      	ldr	r2, [pc, #100]	; (800278c <pvPortMalloc+0x164>)
 8002726:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <pvPortMalloc+0x164>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <pvPortMalloc+0x16c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d203      	bcs.n	800273c <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <pvPortMalloc+0x164>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a16      	ldr	r2, [pc, #88]	; (8002794 <pvPortMalloc+0x16c>)
 800273a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <pvPortMalloc+0x170>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	3301      	adds	r3, #1
 8002754:	4a10      	ldr	r2, [pc, #64]	; (8002798 <pvPortMalloc+0x170>)
 8002756:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002758:	f7fe fd20 	bl	800119c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <pvPortMalloc+0x154>
        __asm volatile
 8002766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276a:	f383 8811 	msr	BASEPRI, r3
 800276e:	f3bf 8f6f 	isb	sy
 8002772:	f3bf 8f4f 	dsb	sy
 8002776:	60fb      	str	r3, [r7, #12]
    }
 8002778:	bf00      	nop
 800277a:	e7fe      	b.n	800277a <pvPortMalloc+0x152>
    return pvReturn;
 800277c:	69fb      	ldr	r3, [r7, #28]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3728      	adds	r7, #40	; 0x28
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20012dbc 	.word	0x20012dbc
 800278c:	20012dc0 	.word	0x20012dc0
 8002790:	20012db4 	.word	0x20012db4
 8002794:	20012dc4 	.word	0x20012dc4
 8002798:	20012dc8 	.word	0x20012dc8

0800279c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d049      	beq.n	8002842 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80027ae:	2308      	movs	r3, #8
 80027b0:	425b      	negs	r3, r3
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4413      	add	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	db0a      	blt.n	80027da <vPortFree+0x3e>
        __asm volatile
 80027c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	60fb      	str	r3, [r7, #12]
    }
 80027d6:	bf00      	nop
 80027d8:	e7fe      	b.n	80027d8 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <vPortFree+0x5c>
        __asm volatile
 80027e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e6:	f383 8811 	msr	BASEPRI, r3
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	f3bf 8f4f 	dsb	sy
 80027f2:	60bb      	str	r3, [r7, #8]
    }
 80027f4:	bf00      	nop
 80027f6:	e7fe      	b.n	80027f6 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	0fdb      	lsrs	r3, r3, #31
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01c      	beq.n	8002842 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d118      	bne.n	8002842 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800281c:	f7fe fcb0 	bl	8001180 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <vPortFree+0xb0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4413      	add	r3, r2
 800282a:	4a08      	ldr	r2, [pc, #32]	; (800284c <vPortFree+0xb0>)
 800282c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800282e:	6938      	ldr	r0, [r7, #16]
 8002830:	f000 f86c 	bl	800290c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <vPortFree+0xb4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	4a05      	ldr	r2, [pc, #20]	; (8002850 <vPortFree+0xb4>)
 800283c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800283e:	f7fe fcad 	bl	800119c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002842:	bf00      	nop
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20012dc0 	.word	0x20012dc0
 8002850:	20012dcc 	.word	0x20012dcc

08002854 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800285a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800285e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002860:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <prvHeapInit+0xa4>)
 8002862:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00c      	beq.n	8002888 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3307      	adds	r3, #7
 8002872:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0307 	bic.w	r3, r3, #7
 800287a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	4a1d      	ldr	r2, [pc, #116]	; (80028f8 <prvHeapInit+0xa4>)
 8002884:	4413      	add	r3, r2
 8002886:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800288c:	4a1b      	ldr	r2, [pc, #108]	; (80028fc <prvHeapInit+0xa8>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002892:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <prvHeapInit+0xa8>)
 8002894:	2200      	movs	r2, #0
 8002896:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	4413      	add	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80028a0:	2208      	movs	r2, #8
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0307 	bic.w	r3, r3, #7
 80028ae:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4a13      	ldr	r2, [pc, #76]	; (8002900 <prvHeapInit+0xac>)
 80028b4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <prvHeapInit+0xac>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <prvHeapInit+0xac>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	1ad2      	subs	r2, r2, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <prvHeapInit+0xac>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a08      	ldr	r2, [pc, #32]	; (8002904 <prvHeapInit+0xb0>)
 80028e2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4a07      	ldr	r2, [pc, #28]	; (8002908 <prvHeapInit+0xb4>)
 80028ea:	6013      	str	r3, [r2, #0]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	200001b4 	.word	0x200001b4
 80028fc:	20012db4 	.word	0x20012db4
 8002900:	20012dbc 	.word	0x20012dbc
 8002904:	20012dc4 	.word	0x20012dc4
 8002908:	20012dc0 	.word	0x20012dc0

0800290c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002914:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <prvInsertBlockIntoFreeList+0xac>)
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	e002      	b.n	8002920 <prvInsertBlockIntoFreeList+0x14>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	429a      	cmp	r2, r3
 8002928:	d8f7      	bhi.n	800291a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	4413      	add	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	d108      	bne.n	800294e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	441a      	add	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	441a      	add	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d118      	bne.n	8002994 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <prvInsertBlockIntoFreeList+0xb0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d00d      	beq.n	800298a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	441a      	add	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	e008      	b.n	800299c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <prvInsertBlockIntoFreeList+0xb0>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e003      	b.n	800299c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d002      	beq.n	80029aa <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20012db4 	.word	0x20012db4
 80029bc:	20012dbc 	.word	0x20012dbc

080029c0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80029ce:	2205      	movs	r2, #5
 80029d0:	492b      	ldr	r1, [pc, #172]	; (8002a80 <SYSVIEW_AddTask+0xc0>)
 80029d2:	68b8      	ldr	r0, [r7, #8]
 80029d4:	f001 fb56 	bl	8004084 <memcmp>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d04b      	beq.n	8002a76 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80029de:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <SYSVIEW_AddTask+0xc4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b07      	cmp	r3, #7
 80029e4:	d903      	bls.n	80029ee <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80029e6:	4828      	ldr	r0, [pc, #160]	; (8002a88 <SYSVIEW_AddTask+0xc8>)
 80029e8:	f001 faf0 	bl	8003fcc <SEGGER_SYSVIEW_Warn>
    return;
 80029ec:	e044      	b.n	8002a78 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80029ee:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <SYSVIEW_AddTask+0xc4>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	4926      	ldr	r1, [pc, #152]	; (8002a8c <SYSVIEW_AddTask+0xcc>)
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <SYSVIEW_AddTask+0xc4>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4921      	ldr	r1, [pc, #132]	; (8002a8c <SYSVIEW_AddTask+0xcc>)
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	3304      	adds	r3, #4
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002a18:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <SYSVIEW_AddTask+0xc4>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	491b      	ldr	r1, [pc, #108]	; (8002a8c <SYSVIEW_AddTask+0xcc>)
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	3308      	adds	r3, #8
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <SYSVIEW_AddTask+0xc4>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	4916      	ldr	r1, [pc, #88]	; (8002a8c <SYSVIEW_AddTask+0xcc>)
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	330c      	adds	r3, #12
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <SYSVIEW_AddTask+0xc4>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4910      	ldr	r1, [pc, #64]	; (8002a8c <SYSVIEW_AddTask+0xcc>)
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	3310      	adds	r3, #16
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <SYSVIEW_AddTask+0xc4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <SYSVIEW_AddTask+0xc4>)
 8002a62:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f80e 	bl	8002a90 <SYSVIEW_SendTaskInfo>
 8002a74:	e000      	b.n	8002a78 <SYSVIEW_AddTask+0xb8>
    return;
 8002a76:	bf00      	nop

}
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	08004160 	.word	0x08004160
 8002a84:	20012e70 	.word	0x20012e70
 8002a88:	08004168 	.word	0x08004168
 8002a8c:	20012dd0 	.word	0x20012dd0

08002a90 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002a9e:	f107 0314 	add.w	r3, r7, #20
 8002aa2:	2214      	movs	r2, #20
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f001 fafc 	bl	80040a4 <memset>
  TaskInfo.TaskID     = TaskID;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 ff05 	bl	80038d4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002aca:	bf00      	nop
 8002acc:	3728      	adds	r7, #40	; 0x28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8002ada:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <USART2_IRQHandler+0x80>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d011      	beq.n	8002b0e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <USART2_IRQHandler+0x84>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 030b 	and.w	r3, r3, #11
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d108      	bne.n	8002b0e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002afc:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <USART2_IRQHandler+0x88>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d004      	beq.n	8002b0e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <USART2_IRQHandler+0x88>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	79fa      	ldrb	r2, [r7, #7]
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01a      	beq.n	8002b4e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002b18:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <USART2_IRQHandler+0x8c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d015      	beq.n	8002b4c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <USART2_IRQHandler+0x8c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	1dfa      	adds	r2, r7, #7
 8002b26:	4610      	mov	r0, r2
 8002b28:	4798      	blx	r3
 8002b2a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <USART2_IRQHandler+0x90>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <USART2_IRQHandler+0x90>)
 8002b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e006      	b.n	8002b4e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <USART2_IRQHandler+0x80>)
 8002b42:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8002b44:	79fa      	ldrb	r2, [r7, #7]
 8002b46:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <USART2_IRQHandler+0x84>)
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e000      	b.n	8002b4e <USART2_IRQHandler+0x7a>
      return;
 8002b4c:	bf00      	nop
    }
  }
}
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40004400 	.word	0x40004400
 8002b58:	40004404 	.word	0x40004404
 8002b5c:	20012e74 	.word	0x20012e74
 8002b60:	20012e78 	.word	0x20012e78
 8002b64:	4000440c 	.word	0x4000440c

08002b68 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	4000440c 	.word	0x4000440c

08002b88 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002b8e:	4b26      	ldr	r3, [pc, #152]	; (8002c28 <_DoInit+0xa0>)
 8002b90:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8002b92:	22a8      	movs	r2, #168	; 0xa8
 8002b94:	2100      	movs	r1, #0
 8002b96:	6838      	ldr	r0, [r7, #0]
 8002b98:	f001 fa84 	bl	80040a4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	4a20      	ldr	r2, [pc, #128]	; (8002c2c <_DoInit+0xa4>)
 8002bac:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <_DoInit+0xa8>)
 8002bb2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bba:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	4a16      	ldr	r2, [pc, #88]	; (8002c2c <_DoInit+0xa4>)
 8002bd2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <_DoInit+0xac>)
 8002bd8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2210      	movs	r2, #16
 8002bde:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2200      	movs	r2, #0
 8002bea:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8002bf2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	e00c      	b.n	8002c16 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f1c3 030f 	rsb	r3, r3, #15
 8002c02:	4a0d      	ldr	r2, [pc, #52]	; (8002c38 <_DoInit+0xb0>)
 8002c04:	5cd1      	ldrb	r1, [r2, r3]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	460a      	mov	r2, r1
 8002c0e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3301      	adds	r3, #1
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b0f      	cmp	r3, #15
 8002c1a:	d9ef      	bls.n	8002bfc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8002c1c:	f3bf 8f5f 	dmb	sy
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20012e7c 	.word	0x20012e7c
 8002c2c:	080041b8 	.word	0x080041b8
 8002c30:	20012f24 	.word	0x20012f24
 8002c34:	20013324 	.word	0x20013324
 8002c38:	080041c4 	.word	0x080041c4

08002c3c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	; 0x30
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002c48:	4b3e      	ldr	r3, [pc, #248]	; (8002d44 <SEGGER_RTT_ReadNoLock+0x108>)
 8002c4a:	623b      	str	r3, [r7, #32]
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <SEGGER_RTT_ReadNoLock+0x1e>
 8002c56:	f7ff ff97 	bl	8002b88 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	3360      	adds	r3, #96	; 0x60
 8002c66:	4a37      	ldr	r2, [pc, #220]	; (8002d44 <SEGGER_RTT_ReadNoLock+0x108>)
 8002c68:	4413      	add	r3, r2
 8002c6a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d92b      	bls.n	8002ce0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4293      	cmp	r3, r2
 8002c98:	bf28      	it	cs
 8002c9a:	4613      	movcs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	4413      	add	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	6939      	ldr	r1, [r7, #16]
 8002cac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cae:	f001 fa25 	bl	80040fc <memcpy>
    NumBytesRead += NumBytesRem;
 8002cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	4413      	add	r3, r2
 8002cd0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d101      	bne.n	8002ce0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4293      	cmp	r3, r2
 8002cee:	bf28      	it	cs
 8002cf0:	4613      	movcs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d019      	beq.n	8002d2e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	4413      	add	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	6939      	ldr	r1, [r7, #16]
 8002d08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d0a:	f001 f9f7 	bl	80040fc <memcpy>
    NumBytesRead += NumBytesRem;
 8002d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	4413      	add	r3, r2
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d38:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3730      	adds	r7, #48	; 0x30
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20012e7c 	.word	0x20012e7c

08002d48 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	60fa      	str	r2, [r7, #12]
 8002d5e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b80      	cmp	r3, #128	; 0x80
 8002d64:	d90a      	bls.n	8002d7c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8002d6a:	e007      	b.n	8002d7c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	1c53      	adds	r3, r2, #1
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1c59      	adds	r1, r3, #1
 8002d76:	60f9      	str	r1, [r7, #12]
 8002d78:	7812      	ldrb	r2, [r2, #0]
 8002d7a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	1e5a      	subs	r2, r3, #1
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <_EncodeStr+0x46>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ee      	bne.n	8002d6c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3307      	adds	r3, #7
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002dc6:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <_HandleIncomingPacket+0xd8>)
 8002dc8:	7e1b      	ldrb	r3, [r3, #24]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	1cfb      	adds	r3, r7, #3
 8002dce:	2201      	movs	r2, #1
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f7ff ff33 	bl	8002c3c <SEGGER_RTT_ReadNoLock>
 8002dd6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d057      	beq.n	8002e8e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	2b80      	cmp	r3, #128	; 0x80
 8002de2:	d031      	beq.n	8002e48 <_HandleIncomingPacket+0x88>
 8002de4:	2b80      	cmp	r3, #128	; 0x80
 8002de6:	dc40      	bgt.n	8002e6a <_HandleIncomingPacket+0xaa>
 8002de8:	2b07      	cmp	r3, #7
 8002dea:	dc15      	bgt.n	8002e18 <_HandleIncomingPacket+0x58>
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	dd3c      	ble.n	8002e6a <_HandleIncomingPacket+0xaa>
 8002df0:	3b01      	subs	r3, #1
 8002df2:	2b06      	cmp	r3, #6
 8002df4:	d839      	bhi.n	8002e6a <_HandleIncomingPacket+0xaa>
 8002df6:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <_HandleIncomingPacket+0x3c>)
 8002df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfc:	08002e1f 	.word	0x08002e1f
 8002e00:	08002e25 	.word	0x08002e25
 8002e04:	08002e2b 	.word	0x08002e2b
 8002e08:	08002e31 	.word	0x08002e31
 8002e0c:	08002e37 	.word	0x08002e37
 8002e10:	08002e3d 	.word	0x08002e3d
 8002e14:	08002e43 	.word	0x08002e43
 8002e18:	2b7f      	cmp	r3, #127	; 0x7f
 8002e1a:	d033      	beq.n	8002e84 <_HandleIncomingPacket+0xc4>
 8002e1c:	e025      	b.n	8002e6a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002e1e:	f000 fbdd 	bl	80035dc <SEGGER_SYSVIEW_Start>
      break;
 8002e22:	e034      	b.n	8002e8e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002e24:	f000 fc96 	bl	8003754 <SEGGER_SYSVIEW_Stop>
      break;
 8002e28:	e031      	b.n	8002e8e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002e2a:	f000 fe4b 	bl	8003ac4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002e2e:	e02e      	b.n	8002e8e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002e30:	f000 fe34 	bl	8003a9c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002e34:	e02b      	b.n	8002e8e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002e36:	f000 fcb3 	bl	80037a0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002e3a:	e028      	b.n	8002e8e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002e3c:	f001 f888 	bl	8003f50 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002e40:	e025      	b.n	8002e8e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002e42:	f001 f867 	bl	8003f14 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002e46:	e022      	b.n	8002e8e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002e48:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <_HandleIncomingPacket+0xd8>)
 8002e4a:	7e1b      	ldrb	r3, [r3, #24]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	1cfb      	adds	r3, r7, #3
 8002e50:	2201      	movs	r2, #1
 8002e52:	4619      	mov	r1, r3
 8002e54:	f7ff fef2 	bl	8002c3c <SEGGER_RTT_ReadNoLock>
 8002e58:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d013      	beq.n	8002e88 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 ffcc 	bl	8003e00 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002e68:	e00e      	b.n	8002e88 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	b25b      	sxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	da0c      	bge.n	8002e8c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002e72:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <_HandleIncomingPacket+0xd8>)
 8002e74:	7e1b      	ldrb	r3, [r3, #24]
 8002e76:	4618      	mov	r0, r3
 8002e78:	1cfb      	adds	r3, r7, #3
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f7ff fedd 	bl	8002c3c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002e82:	e003      	b.n	8002e8c <_HandleIncomingPacket+0xcc>
      break;
 8002e84:	bf00      	nop
 8002e86:	e002      	b.n	8002e8e <_HandleIncomingPacket+0xce>
      break;
 8002e88:	bf00      	nop
 8002e8a:	e000      	b.n	8002e8e <_HandleIncomingPacket+0xce>
      break;
 8002e8c:	bf00      	nop
    }
  }
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20013334 	.word	0x20013334

08002e9c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08c      	sub	sp, #48	; 0x30
 8002ea0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb0:	4b32      	ldr	r3, [pc, #200]	; (8002f7c <_TrySendOverflowPacket+0xe0>)
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eb6:	e00b      	b.n	8002ed0 <_TrySendOverflowPacket+0x34>
 8002eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	1c59      	adds	r1, r3, #1
 8002ec0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002ec2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	09db      	lsrs	r3, r3, #7
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ed4:	d8f0      	bhi.n	8002eb8 <_TrySendOverflowPacket+0x1c>
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002ee6:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <_TrySendOverflowPacket+0xe4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002eec:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <_TrySendOverflowPacket+0xe0>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	623b      	str	r3, [r7, #32]
 8002efe:	e00b      	b.n	8002f18 <_TrySendOverflowPacket+0x7c>
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	1c59      	adds	r1, r3, #1
 8002f08:	6279      	str	r1, [r7, #36]	; 0x24
 8002f0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	09db      	lsrs	r3, r3, #7
 8002f16:	623b      	str	r3, [r7, #32]
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f1c:	d8f0      	bhi.n	8002f00 <_TrySendOverflowPacket+0x64>
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	627a      	str	r2, [r7, #36]	; 0x24
 8002f24:	6a3a      	ldr	r2, [r7, #32]
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8002f2e:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <_TrySendOverflowPacket+0xe0>)
 8002f30:	785b      	ldrb	r3, [r3, #1]
 8002f32:	4618      	mov	r0, r3
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	1d3b      	adds	r3, r7, #4
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f7fd f946 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002f44:	4603      	mov	r3, r0
 8002f46:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8002f48:	f7ff fe0e 	bl	8002b68 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002f52:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <_TrySendOverflowPacket+0xe0>)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <_TrySendOverflowPacket+0xe0>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <_TrySendOverflowPacket+0xe0>)
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	e004      	b.n	8002f70 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002f66:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <_TrySendOverflowPacket+0xe0>)
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	4a03      	ldr	r2, [pc, #12]	; (8002f7c <_TrySendOverflowPacket+0xe0>)
 8002f6e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002f70:	693b      	ldr	r3, [r7, #16]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3730      	adds	r7, #48	; 0x30
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20013334 	.word	0x20013334
 8002f80:	e0001004 	.word	0xe0001004

08002f84 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002f90:	4b96      	ldr	r3, [pc, #600]	; (80031ec <_SendPacket+0x268>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d010      	beq.n	8002fba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002f98:	4b94      	ldr	r3, [pc, #592]	; (80031ec <_SendPacket+0x268>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8130 	beq.w	8003202 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002fa2:	4b92      	ldr	r3, [pc, #584]	; (80031ec <_SendPacket+0x268>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d109      	bne.n	8002fbe <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002faa:	f7ff ff77 	bl	8002e9c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002fae:	4b8f      	ldr	r3, [pc, #572]	; (80031ec <_SendPacket+0x268>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	f040 8127 	bne.w	8003206 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8002fb8:	e001      	b.n	8002fbe <_SendPacket+0x3a>
    goto Send;
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <_SendPacket+0x3c>
Send:
 8002fbe:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b1f      	cmp	r3, #31
 8002fc4:	d809      	bhi.n	8002fda <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002fc6:	4b89      	ldr	r3, [pc, #548]	; (80031ec <_SendPacket+0x268>)
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f040 8118 	bne.w	800320a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b17      	cmp	r3, #23
 8002fde:	d807      	bhi.n	8002ff0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e0c4      	b.n	800317a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8002ffc:	d912      	bls.n	8003024 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	09da      	lsrs	r2, r3, #7
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3b01      	subs	r3, #1
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	3a01      	subs	r2, #1
 8003016:	60fa      	str	r2, [r7, #12]
 8003018:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	e006      	b.n	8003032 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3b01      	subs	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	b2da      	uxtb	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b7e      	cmp	r3, #126	; 0x7e
 8003036:	d807      	bhi.n	8003048 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3b01      	subs	r3, #1
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e098      	b.n	800317a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800304e:	d212      	bcs.n	8003076 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	09da      	lsrs	r2, r3, #7
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	3b01      	subs	r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	3a01      	subs	r2, #1
 8003068:	60fa      	str	r2, [r7, #12]
 800306a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	701a      	strb	r2, [r3, #0]
 8003074:	e081      	b.n	800317a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800307c:	d21d      	bcs.n	80030ba <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	0b9a      	lsrs	r2, r3, #14
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3b01      	subs	r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	09db      	lsrs	r3, r3, #7
 8003092:	b2db      	uxtb	r3, r3
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	3a01      	subs	r2, #1
 8003098:	60fa      	str	r2, [r7, #12]
 800309a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	3a01      	subs	r2, #1
 80030ac:	60fa      	str	r2, [r7, #12]
 80030ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	e05f      	b.n	800317a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030c0:	d228      	bcs.n	8003114 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	0d5a      	lsrs	r2, r3, #21
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	0b9b      	lsrs	r3, r3, #14
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	3a01      	subs	r2, #1
 80030dc:	60fa      	str	r2, [r7, #12]
 80030de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	09db      	lsrs	r3, r3, #7
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	3a01      	subs	r2, #1
 80030f2:	60fa      	str	r2, [r7, #12]
 80030f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	3a01      	subs	r2, #1
 8003106:	60fa      	str	r2, [r7, #12]
 8003108:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e032      	b.n	800317a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	0f1a      	lsrs	r2, r3, #28
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	3b01      	subs	r3, #1
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	0d5b      	lsrs	r3, r3, #21
 8003128:	b2db      	uxtb	r3, r3
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	3a01      	subs	r2, #1
 800312e:	60fa      	str	r2, [r7, #12]
 8003130:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	0b9b      	lsrs	r3, r3, #14
 800313e:	b2db      	uxtb	r3, r3
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	3a01      	subs	r2, #1
 8003144:	60fa      	str	r2, [r7, #12]
 8003146:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800314a:	b2da      	uxtb	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	09db      	lsrs	r3, r3, #7
 8003154:	b2db      	uxtb	r3, r3
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	3a01      	subs	r2, #1
 800315a:	60fa      	str	r2, [r7, #12]
 800315c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003160:	b2da      	uxtb	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	3a01      	subs	r2, #1
 800316e:	60fa      	str	r2, [r7, #12]
 8003170:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003174:	b2da      	uxtb	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800317a:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <_SendPacket+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003180:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <_SendPacket+0x268>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	623b      	str	r3, [r7, #32]
 8003192:	e00b      	b.n	80031ac <_SendPacket+0x228>
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	b2da      	uxtb	r2, r3
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	1c59      	adds	r1, r3, #1
 800319c:	6279      	str	r1, [r7, #36]	; 0x24
 800319e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	09db      	lsrs	r3, r3, #7
 80031aa:	623b      	str	r3, [r7, #32]
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	2b7f      	cmp	r3, #127	; 0x7f
 80031b0:	d8f0      	bhi.n	8003194 <_SendPacket+0x210>
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	627a      	str	r2, [r7, #36]	; 0x24
 80031b8:	6a3a      	ldr	r2, [r7, #32]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <_SendPacket+0x268>)
 80031c4:	785b      	ldrb	r3, [r3, #1]
 80031c6:	4618      	mov	r0, r3
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	68f9      	ldr	r1, [r7, #12]
 80031d2:	f7fc fffd 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80031d6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80031d8:	f7ff fcc6 	bl	8002b68 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80031e2:	4a02      	ldr	r2, [pc, #8]	; (80031ec <_SendPacket+0x268>)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	60d3      	str	r3, [r2, #12]
 80031e8:	e010      	b.n	800320c <_SendPacket+0x288>
 80031ea:	bf00      	nop
 80031ec:	20013334 	.word	0x20013334
 80031f0:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <_SendPacket+0x2d8>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	4b17      	ldr	r3, [pc, #92]	; (800325c <_SendPacket+0x2d8>)
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e004      	b.n	800320c <_SendPacket+0x288>
    goto SendDone;
 8003202:	bf00      	nop
 8003204:	e002      	b.n	800320c <_SendPacket+0x288>
      goto SendDone;
 8003206:	bf00      	nop
 8003208:	e000      	b.n	800320c <_SendPacket+0x288>
      goto SendDone;
 800320a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <_SendPacket+0x2d8>)
 800320e:	7e1b      	ldrb	r3, [r3, #24]
 8003210:	4619      	mov	r1, r3
 8003212:	4a13      	ldr	r2, [pc, #76]	; (8003260 <_SendPacket+0x2dc>)
 8003214:	460b      	mov	r3, r1
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	440b      	add	r3, r1
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	336c      	adds	r3, #108	; 0x6c
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <_SendPacket+0x2d8>)
 8003224:	7e1b      	ldrb	r3, [r3, #24]
 8003226:	4618      	mov	r0, r3
 8003228:	490d      	ldr	r1, [pc, #52]	; (8003260 <_SendPacket+0x2dc>)
 800322a:	4603      	mov	r3, r0
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4403      	add	r3, r0
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	440b      	add	r3, r1
 8003234:	3370      	adds	r3, #112	; 0x70
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d00b      	beq.n	8003254 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800323c:	4b07      	ldr	r3, [pc, #28]	; (800325c <_SendPacket+0x2d8>)
 800323e:	789b      	ldrb	r3, [r3, #2]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d107      	bne.n	8003254 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <_SendPacket+0x2d8>)
 8003246:	2201      	movs	r2, #1
 8003248:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800324a:	f7ff fdb9 	bl	8002dc0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800324e:	4b03      	ldr	r3, [pc, #12]	; (800325c <_SendPacket+0x2d8>)
 8003250:	2200      	movs	r2, #0
 8003252:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003254:	bf00      	nop
 8003256:	3728      	adds	r7, #40	; 0x28
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20013334 	.word	0x20013334
 8003260:	20012e7c 	.word	0x20012e7c

08003264 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800326c:	f3ef 8311 	mrs	r3, BASEPRI
 8003270:	f04f 0120 	mov.w	r1, #32
 8003274:	f381 8811 	msr	BASEPRI, r1
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	4808      	ldr	r0, [pc, #32]	; (800329c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800327c:	f7ff fd94 	bl	8002da8 <_PreparePacket>
 8003280:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	68b8      	ldr	r0, [r7, #8]
 8003288:	f7ff fe7c 	bl	8002f84 <_SendPacket>
  RECORD_END();
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f383 8811 	msr	BASEPRI, r3
}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20013364 	.word	0x20013364

080032a0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80032aa:	f3ef 8311 	mrs	r3, BASEPRI
 80032ae:	f04f 0120 	mov.w	r1, #32
 80032b2:	f381 8811 	msr	BASEPRI, r1
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	4816      	ldr	r0, [pc, #88]	; (8003314 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80032ba:	f7ff fd75 	bl	8002da8 <_PreparePacket>
 80032be:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	e00b      	b.n	80032e6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	1c59      	adds	r1, r3, #1
 80032d6:	61f9      	str	r1, [r7, #28]
 80032d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	09db      	lsrs	r3, r3, #7
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b7f      	cmp	r3, #127	; 0x7f
 80032ea:	d8f0      	bhi.n	80032ce <SEGGER_SYSVIEW_RecordU32+0x2e>
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	61fa      	str	r2, [r7, #28]
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	68f9      	ldr	r1, [r7, #12]
 8003300:	6938      	ldr	r0, [r7, #16]
 8003302:	f7ff fe3f 	bl	8002f84 <_SendPacket>
  RECORD_END();
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f383 8811 	msr	BASEPRI, r3
}
 800330c:	bf00      	nop
 800330e:	3720      	adds	r7, #32
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20013364 	.word	0x20013364

08003318 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b08c      	sub	sp, #48	; 0x30
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003324:	f3ef 8311 	mrs	r3, BASEPRI
 8003328:	f04f 0120 	mov.w	r1, #32
 800332c:	f381 8811 	msr	BASEPRI, r1
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	4825      	ldr	r0, [pc, #148]	; (80033c8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003334:	f7ff fd38 	bl	8002da8 <_PreparePacket>
 8003338:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
 8003346:	e00b      	b.n	8003360 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	b2da      	uxtb	r2, r3
 800334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334e:	1c59      	adds	r1, r3, #1
 8003350:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003352:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335c:	09db      	lsrs	r3, r3, #7
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003362:	2b7f      	cmp	r3, #127	; 0x7f
 8003364:	d8f0      	bhi.n	8003348 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800336c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	623b      	str	r3, [r7, #32]
 800337e:	e00b      	b.n	8003398 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	b2da      	uxtb	r2, r3
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	1c59      	adds	r1, r3, #1
 8003388:	6279      	str	r1, [r7, #36]	; 0x24
 800338a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	09db      	lsrs	r3, r3, #7
 8003396:	623b      	str	r3, [r7, #32]
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	2b7f      	cmp	r3, #127	; 0x7f
 800339c:	d8f0      	bhi.n	8003380 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	627a      	str	r2, [r7, #36]	; 0x24
 80033a4:	6a3a      	ldr	r2, [r7, #32]
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	6979      	ldr	r1, [r7, #20]
 80033b2:	69b8      	ldr	r0, [r7, #24]
 80033b4:	f7ff fde6 	bl	8002f84 <_SendPacket>
  RECORD_END();
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f383 8811 	msr	BASEPRI, r3
}
 80033be:	bf00      	nop
 80033c0:	3730      	adds	r7, #48	; 0x30
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20013364 	.word	0x20013364

080033cc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08e      	sub	sp, #56	; 0x38
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80033da:	f3ef 8311 	mrs	r3, BASEPRI
 80033de:	f04f 0120 	mov.w	r1, #32
 80033e2:	f381 8811 	msr	BASEPRI, r1
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	4832      	ldr	r0, [pc, #200]	; (80034b4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80033ea:	f7ff fcdd 	bl	8002da8 <_PreparePacket>
 80033ee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	637b      	str	r3, [r7, #52]	; 0x34
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
 80033fc:	e00b      	b.n	8003416 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	b2da      	uxtb	r2, r3
 8003402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003404:	1c59      	adds	r1, r3, #1
 8003406:	6379      	str	r1, [r7, #52]	; 0x34
 8003408:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	701a      	strb	r2, [r3, #0]
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	09db      	lsrs	r3, r3, #7
 8003414:	633b      	str	r3, [r7, #48]	; 0x30
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	2b7f      	cmp	r3, #127	; 0x7f
 800341a:	d8f0      	bhi.n	80033fe <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800341c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	637a      	str	r2, [r7, #52]	; 0x34
 8003422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	701a      	strb	r2, [r3, #0]
 8003428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	62bb      	str	r3, [r7, #40]	; 0x28
 8003434:	e00b      	b.n	800344e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	b2da      	uxtb	r2, r3
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	1c59      	adds	r1, r3, #1
 800343e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003440:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	09db      	lsrs	r3, r3, #7
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	2b7f      	cmp	r3, #127	; 0x7f
 8003452:	d8f0      	bhi.n	8003436 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	62fa      	str	r2, [r7, #44]	; 0x2c
 800345a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003462:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	623b      	str	r3, [r7, #32]
 800346c:	e00b      	b.n	8003486 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	1c59      	adds	r1, r3, #1
 8003476:	6279      	str	r1, [r7, #36]	; 0x24
 8003478:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	09db      	lsrs	r3, r3, #7
 8003484:	623b      	str	r3, [r7, #32]
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	2b7f      	cmp	r3, #127	; 0x7f
 800348a:	d8f0      	bhi.n	800346e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	627a      	str	r2, [r7, #36]	; 0x24
 8003492:	6a3a      	ldr	r2, [r7, #32]
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	6979      	ldr	r1, [r7, #20]
 80034a0:	69b8      	ldr	r0, [r7, #24]
 80034a2:	f7ff fd6f 	bl	8002f84 <_SendPacket>
  RECORD_END();
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f383 8811 	msr	BASEPRI, r3
}
 80034ac:	bf00      	nop
 80034ae:	3738      	adds	r7, #56	; 0x38
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20013364 	.word	0x20013364

080034b8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b090      	sub	sp, #64	; 0x40
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80034c6:	f3ef 8311 	mrs	r3, BASEPRI
 80034ca:	f04f 0120 	mov.w	r1, #32
 80034ce:	f381 8811 	msr	BASEPRI, r1
 80034d2:	61fb      	str	r3, [r7, #28]
 80034d4:	4840      	ldr	r0, [pc, #256]	; (80035d8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80034d6:	f7ff fc67 	bl	8002da8 <_PreparePacket>
 80034da:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034e8:	e00b      	b.n	8003502 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80034ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f0:	1c59      	adds	r1, r3, #1
 80034f2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80034f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034fe:	09db      	lsrs	r3, r3, #7
 8003500:	63bb      	str	r3, [r7, #56]	; 0x38
 8003502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003504:	2b7f      	cmp	r3, #127	; 0x7f
 8003506:	d8f0      	bhi.n	80034ea <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800350e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003516:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	637b      	str	r3, [r7, #52]	; 0x34
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	633b      	str	r3, [r7, #48]	; 0x30
 8003520:	e00b      	b.n	800353a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	b2da      	uxtb	r2, r3
 8003526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003528:	1c59      	adds	r1, r3, #1
 800352a:	6379      	str	r1, [r7, #52]	; 0x34
 800352c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	701a      	strb	r2, [r3, #0]
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	09db      	lsrs	r3, r3, #7
 8003538:	633b      	str	r3, [r7, #48]	; 0x30
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	2b7f      	cmp	r3, #127	; 0x7f
 800353e:	d8f0      	bhi.n	8003522 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	637a      	str	r2, [r7, #52]	; 0x34
 8003546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800354e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
 8003558:	e00b      	b.n	8003572 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	b2da      	uxtb	r2, r3
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	1c59      	adds	r1, r3, #1
 8003562:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003564:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356e:	09db      	lsrs	r3, r3, #7
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	2b7f      	cmp	r3, #127	; 0x7f
 8003576:	d8f0      	bhi.n	800355a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800357e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
 800358c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800358e:	623b      	str	r3, [r7, #32]
 8003590:	e00b      	b.n	80035aa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	b2da      	uxtb	r2, r3
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	1c59      	adds	r1, r3, #1
 800359a:	6279      	str	r1, [r7, #36]	; 0x24
 800359c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	701a      	strb	r2, [r3, #0]
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	09db      	lsrs	r3, r3, #7
 80035a8:	623b      	str	r3, [r7, #32]
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	2b7f      	cmp	r3, #127	; 0x7f
 80035ae:	d8f0      	bhi.n	8003592 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	627a      	str	r2, [r7, #36]	; 0x24
 80035b6:	6a3a      	ldr	r2, [r7, #32]
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	6979      	ldr	r1, [r7, #20]
 80035c4:	69b8      	ldr	r0, [r7, #24]
 80035c6:	f7ff fcdd 	bl	8002f84 <_SendPacket>
  RECORD_END();
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f383 8811 	msr	BASEPRI, r3
}
 80035d0:	bf00      	nop
 80035d2:	3740      	adds	r7, #64	; 0x40
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20013364 	.word	0x20013364

080035dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08c      	sub	sp, #48	; 0x30
 80035e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80035e2:	4b59      	ldr	r3, [pc, #356]	; (8003748 <SEGGER_SYSVIEW_Start+0x16c>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80035e8:	f3ef 8311 	mrs	r3, BASEPRI
 80035ec:	f04f 0120 	mov.w	r1, #32
 80035f0:	f381 8811 	msr	BASEPRI, r1
 80035f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80035f6:	4b54      	ldr	r3, [pc, #336]	; (8003748 <SEGGER_SYSVIEW_Start+0x16c>)
 80035f8:	785b      	ldrb	r3, [r3, #1]
 80035fa:	220a      	movs	r2, #10
 80035fc:	4953      	ldr	r1, [pc, #332]	; (800374c <SEGGER_SYSVIEW_Start+0x170>)
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fc fde6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800360a:	f7ff faad 	bl	8002b68 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800360e:	200a      	movs	r0, #10
 8003610:	f7ff fe28 	bl	8003264 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003614:	f3ef 8311 	mrs	r3, BASEPRI
 8003618:	f04f 0120 	mov.w	r1, #32
 800361c:	f381 8811 	msr	BASEPRI, r1
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	484b      	ldr	r0, [pc, #300]	; (8003750 <SEGGER_SYSVIEW_Start+0x174>)
 8003624:	f7ff fbc0 	bl	8002da8 <_PreparePacket>
 8003628:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003632:	4b45      	ldr	r3, [pc, #276]	; (8003748 <SEGGER_SYSVIEW_Start+0x16c>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
 8003638:	e00b      	b.n	8003652 <SEGGER_SYSVIEW_Start+0x76>
 800363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363c:	b2da      	uxtb	r2, r3
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	1c59      	adds	r1, r3, #1
 8003642:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003644:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	09db      	lsrs	r3, r3, #7
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	2b7f      	cmp	r3, #127	; 0x7f
 8003656:	d8f0      	bhi.n	800363a <SEGGER_SYSVIEW_Start+0x5e>
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800365e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
 800366c:	4b36      	ldr	r3, [pc, #216]	; (8003748 <SEGGER_SYSVIEW_Start+0x16c>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	623b      	str	r3, [r7, #32]
 8003672:	e00b      	b.n	800368c <SEGGER_SYSVIEW_Start+0xb0>
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	1c59      	adds	r1, r3, #1
 800367c:	6279      	str	r1, [r7, #36]	; 0x24
 800367e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	09db      	lsrs	r3, r3, #7
 800368a:	623b      	str	r3, [r7, #32]
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	2b7f      	cmp	r3, #127	; 0x7f
 8003690:	d8f0      	bhi.n	8003674 <SEGGER_SYSVIEW_Start+0x98>
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	627a      	str	r2, [r7, #36]	; 0x24
 8003698:	6a3a      	ldr	r2, [r7, #32]
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	4b28      	ldr	r3, [pc, #160]	; (8003748 <SEGGER_SYSVIEW_Start+0x16c>)
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	e00b      	b.n	80036c6 <SEGGER_SYSVIEW_Start+0xea>
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	1c59      	adds	r1, r3, #1
 80036b6:	61f9      	str	r1, [r7, #28]
 80036b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	701a      	strb	r2, [r3, #0]
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	09db      	lsrs	r3, r3, #7
 80036c4:	61bb      	str	r3, [r7, #24]
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b7f      	cmp	r3, #127	; 0x7f
 80036ca:	d8f0      	bhi.n	80036ae <SEGGER_SYSVIEW_Start+0xd2>
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	61fa      	str	r2, [r7, #28]
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	701a      	strb	r2, [r3, #0]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	2300      	movs	r3, #0
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	e00b      	b.n	80036fe <SEGGER_SYSVIEW_Start+0x122>
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	1c59      	adds	r1, r3, #1
 80036ee:	6179      	str	r1, [r7, #20]
 80036f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	09db      	lsrs	r3, r3, #7
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b7f      	cmp	r3, #127	; 0x7f
 8003702:	d8f0      	bhi.n	80036e6 <SEGGER_SYSVIEW_Start+0x10a>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	617a      	str	r2, [r7, #20]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003714:	2218      	movs	r2, #24
 8003716:	6839      	ldr	r1, [r7, #0]
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff fc33 	bl	8002f84 <_SendPacket>
      RECORD_END();
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003724:	4b08      	ldr	r3, [pc, #32]	; (8003748 <SEGGER_SYSVIEW_Start+0x16c>)
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <SEGGER_SYSVIEW_Start+0x16c>)
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003732:	f000 f9c7 	bl	8003ac4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003736:	f000 f9b1 	bl	8003a9c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800373a:	f000 fc09 	bl	8003f50 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800373e:	bf00      	nop
 8003740:	3730      	adds	r7, #48	; 0x30
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20013334 	.word	0x20013334
 800374c:	080041d8 	.word	0x080041d8
 8003750:	20013364 	.word	0x20013364

08003754 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800375a:	f3ef 8311 	mrs	r3, BASEPRI
 800375e:	f04f 0120 	mov.w	r1, #32
 8003762:	f381 8811 	msr	BASEPRI, r1
 8003766:	607b      	str	r3, [r7, #4]
 8003768:	480b      	ldr	r0, [pc, #44]	; (8003798 <SEGGER_SYSVIEW_Stop+0x44>)
 800376a:	f7ff fb1d 	bl	8002da8 <_PreparePacket>
 800376e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003770:	4b0a      	ldr	r3, [pc, #40]	; (800379c <SEGGER_SYSVIEW_Stop+0x48>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003778:	220b      	movs	r2, #11
 800377a:	6839      	ldr	r1, [r7, #0]
 800377c:	6838      	ldr	r0, [r7, #0]
 800377e:	f7ff fc01 	bl	8002f84 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <SEGGER_SYSVIEW_Stop+0x48>)
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f383 8811 	msr	BASEPRI, r3
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	20013364 	.word	0x20013364
 800379c:	20013334 	.word	0x20013334

080037a0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08c      	sub	sp, #48	; 0x30
 80037a4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80037a6:	f3ef 8311 	mrs	r3, BASEPRI
 80037aa:	f04f 0120 	mov.w	r1, #32
 80037ae:	f381 8811 	msr	BASEPRI, r1
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	4845      	ldr	r0, [pc, #276]	; (80038cc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80037b6:	f7ff faf7 	bl	8002da8 <_PreparePacket>
 80037ba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c4:	4b42      	ldr	r3, [pc, #264]	; (80038d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ca:	e00b      	b.n	80037e4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d2:	1c59      	adds	r1, r3, #1
 80037d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80037d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e0:	09db      	lsrs	r3, r3, #7
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e6:	2b7f      	cmp	r3, #127	; 0x7f
 80037e8:	d8f0      	bhi.n	80037cc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
 80037fe:	4b34      	ldr	r3, [pc, #208]	; (80038d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	623b      	str	r3, [r7, #32]
 8003804:	e00b      	b.n	800381e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	1c59      	adds	r1, r3, #1
 800380e:	6279      	str	r1, [r7, #36]	; 0x24
 8003810:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	09db      	lsrs	r3, r3, #7
 800381c:	623b      	str	r3, [r7, #32]
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	2b7f      	cmp	r3, #127	; 0x7f
 8003822:	d8f0      	bhi.n	8003806 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	627a      	str	r2, [r7, #36]	; 0x24
 800382a:	6a3a      	ldr	r2, [r7, #32]
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	61fb      	str	r3, [r7, #28]
 8003838:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	e00b      	b.n	8003858 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	b2da      	uxtb	r2, r3
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	1c59      	adds	r1, r3, #1
 8003848:	61f9      	str	r1, [r7, #28]
 800384a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	09db      	lsrs	r3, r3, #7
 8003856:	61bb      	str	r3, [r7, #24]
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2b7f      	cmp	r3, #127	; 0x7f
 800385c:	d8f0      	bhi.n	8003840 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	61fa      	str	r2, [r7, #28]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	e00b      	b.n	8003890 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	b2da      	uxtb	r2, r3
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	1c59      	adds	r1, r3, #1
 8003880:	6179      	str	r1, [r7, #20]
 8003882:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	09db      	lsrs	r3, r3, #7
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	2b7f      	cmp	r3, #127	; 0x7f
 8003894:	d8f0      	bhi.n	8003878 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	617a      	str	r2, [r7, #20]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80038a6:	2218      	movs	r2, #24
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	68b8      	ldr	r0, [r7, #8]
 80038ac:	f7ff fb6a 	bl	8002f84 <_SendPacket>
  RECORD_END();
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	4798      	blx	r3
  }
}
 80038c4:	bf00      	nop
 80038c6:	3730      	adds	r7, #48	; 0x30
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20013364 	.word	0x20013364
 80038d0:	20013334 	.word	0x20013334

080038d4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b092      	sub	sp, #72	; 0x48
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80038dc:	f3ef 8311 	mrs	r3, BASEPRI
 80038e0:	f04f 0120 	mov.w	r1, #32
 80038e4:	f381 8811 	msr	BASEPRI, r1
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	486a      	ldr	r0, [pc, #424]	; (8003a94 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80038ec:	f7ff fa5c 	bl	8002da8 <_PreparePacket>
 80038f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	647b      	str	r3, [r7, #68]	; 0x44
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4b66      	ldr	r3, [pc, #408]	; (8003a98 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	643b      	str	r3, [r7, #64]	; 0x40
 8003906:	e00b      	b.n	8003920 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390a:	b2da      	uxtb	r2, r3
 800390c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800390e:	1c59      	adds	r1, r3, #1
 8003910:	6479      	str	r1, [r7, #68]	; 0x44
 8003912:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]
 800391a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800391c:	09db      	lsrs	r3, r3, #7
 800391e:	643b      	str	r3, [r7, #64]	; 0x40
 8003920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003922:	2b7f      	cmp	r3, #127	; 0x7f
 8003924:	d8f0      	bhi.n	8003908 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	647a      	str	r2, [r7, #68]	; 0x44
 800392c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003934:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003940:	e00b      	b.n	800395a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003944:	b2da      	uxtb	r2, r3
 8003946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003948:	1c59      	adds	r1, r3, #1
 800394a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800394c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	09db      	lsrs	r3, r3, #7
 8003958:	63bb      	str	r3, [r7, #56]	; 0x38
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	2b7f      	cmp	r3, #127	; 0x7f
 800395e:	d8f0      	bhi.n	8003942 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	4619      	mov	r1, r3
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f7ff f9e5 	bl	8002d48 <_EncodeStr>
 800397e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003980:	2209      	movs	r2, #9
 8003982:	68f9      	ldr	r1, [r7, #12]
 8003984:	6938      	ldr	r0, [r7, #16]
 8003986:	f7ff fafd 	bl	8002f84 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	637b      	str	r3, [r7, #52]	; 0x34
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4b40      	ldr	r3, [pc, #256]	; (8003a98 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	633b      	str	r3, [r7, #48]	; 0x30
 800399e:	e00b      	b.n	80039b8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a6:	1c59      	adds	r1, r3, #1
 80039a8:	6379      	str	r1, [r7, #52]	; 0x34
 80039aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	09db      	lsrs	r3, r3, #7
 80039b6:	633b      	str	r3, [r7, #48]	; 0x30
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	2b7f      	cmp	r3, #127	; 0x7f
 80039bc:	d8f0      	bhi.n	80039a0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80039be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	637a      	str	r2, [r7, #52]	; 0x34
 80039c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]
 80039ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d8:	e00b      	b.n	80039f2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e0:	1c59      	adds	r1, r3, #1
 80039e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80039e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ee:	09db      	lsrs	r3, r3, #7
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	2b7f      	cmp	r3, #127	; 0x7f
 80039f6:	d8f0      	bhi.n	80039da <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80039f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	701a      	strb	r2, [r3, #0]
 8003a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a06:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	623b      	str	r3, [r7, #32]
 8003a12:	e00b      	b.n	8003a2c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	1c59      	adds	r1, r3, #1
 8003a1c:	6279      	str	r1, [r7, #36]	; 0x24
 8003a1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	09db      	lsrs	r3, r3, #7
 8003a2a:	623b      	str	r3, [r7, #32]
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	2b7f      	cmp	r3, #127	; 0x7f
 8003a30:	d8f0      	bhi.n	8003a14 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	627a      	str	r2, [r7, #36]	; 0x24
 8003a38:	6a3a      	ldr	r2, [r7, #32]
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	e00b      	b.n	8003a64 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	1c59      	adds	r1, r3, #1
 8003a54:	61f9      	str	r1, [r7, #28]
 8003a56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	09db      	lsrs	r3, r3, #7
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	2b7f      	cmp	r3, #127	; 0x7f
 8003a68:	d8f0      	bhi.n	8003a4c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	61fa      	str	r2, [r7, #28]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003a7a:	2215      	movs	r2, #21
 8003a7c:	68f9      	ldr	r1, [r7, #12]
 8003a7e:	6938      	ldr	r0, [r7, #16]
 8003a80:	f7ff fa80 	bl	8002f84 <_SendPacket>
  RECORD_END();
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f383 8811 	msr	BASEPRI, r3
}
 8003a8a:	bf00      	nop
 8003a8c:	3748      	adds	r7, #72	; 0x48
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20013364 	.word	0x20013364
 8003a98:	20013334 	.word	0x20013334

08003a9c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003aa0:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003ab2:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	4798      	blx	r3
  }
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20013334 	.word	0x20013334

08003ac4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003ac4:	b590      	push	{r4, r7, lr}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003aca:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d01a      	beq.n	8003b08 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003adc:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4798      	blx	r3
 8003ae4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003ae8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003aea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	000a      	movs	r2, r1
 8003af8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003afa:	4613      	mov	r3, r2
 8003afc:	461a      	mov	r2, r3
 8003afe:	4621      	mov	r1, r4
 8003b00:	200d      	movs	r0, #13
 8003b02:	f7ff fc09 	bl	8003318 <SEGGER_SYSVIEW_RecordU32x2>
 8003b06:	e006      	b.n	8003b16 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	200c      	movs	r0, #12
 8003b10:	f7ff fbc6 	bl	80032a0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd90      	pop	{r4, r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20013334 	.word	0x20013334
 8003b24:	e0001004 	.word	0xe0001004

08003b28 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8003b32:	f04f 0120 	mov.w	r1, #32
 8003b36:	f381 8811 	msr	BASEPRI, r1
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	4819      	ldr	r0, [pc, #100]	; (8003ba4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003b3e:	f7ff f933 	bl	8002da8 <_PreparePacket>
 8003b42:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003b48:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b50:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	e00b      	b.n	8003b74 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	1c59      	adds	r1, r3, #1
 8003b64:	6179      	str	r1, [r7, #20]
 8003b66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	09db      	lsrs	r3, r3, #7
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b7f      	cmp	r3, #127	; 0x7f
 8003b78:	d8f0      	bhi.n	8003b5c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	617a      	str	r2, [r7, #20]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	68b8      	ldr	r0, [r7, #8]
 8003b90:	f7ff f9f8 	bl	8002f84 <_SendPacket>
  RECORD_END();
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f383 8811 	msr	BASEPRI, r3
}
 8003b9a:	bf00      	nop
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20013364 	.word	0x20013364
 8003ba8:	e000ed04 	.word	0xe000ed04

08003bac <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003bb2:	f3ef 8311 	mrs	r3, BASEPRI
 8003bb6:	f04f 0120 	mov.w	r1, #32
 8003bba:	f381 8811 	msr	BASEPRI, r1
 8003bbe:	607b      	str	r3, [r7, #4]
 8003bc0:	4807      	ldr	r0, [pc, #28]	; (8003be0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003bc2:	f7ff f8f1 	bl	8002da8 <_PreparePacket>
 8003bc6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003bc8:	2203      	movs	r2, #3
 8003bca:	6839      	ldr	r1, [r7, #0]
 8003bcc:	6838      	ldr	r0, [r7, #0]
 8003bce:	f7ff f9d9 	bl	8002f84 <_SendPacket>
  RECORD_END();
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f383 8811 	msr	BASEPRI, r3
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20013364 	.word	0x20013364

08003be4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003bea:	f3ef 8311 	mrs	r3, BASEPRI
 8003bee:	f04f 0120 	mov.w	r1, #32
 8003bf2:	f381 8811 	msr	BASEPRI, r1
 8003bf6:	607b      	str	r3, [r7, #4]
 8003bf8:	4807      	ldr	r0, [pc, #28]	; (8003c18 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003bfa:	f7ff f8d5 	bl	8002da8 <_PreparePacket>
 8003bfe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003c00:	2212      	movs	r2, #18
 8003c02:	6839      	ldr	r1, [r7, #0]
 8003c04:	6838      	ldr	r0, [r7, #0]
 8003c06:	f7ff f9bd 	bl	8002f84 <_SendPacket>
  RECORD_END();
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f383 8811 	msr	BASEPRI, r3
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	20013364 	.word	0x20013364

08003c1c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003c22:	f3ef 8311 	mrs	r3, BASEPRI
 8003c26:	f04f 0120 	mov.w	r1, #32
 8003c2a:	f381 8811 	msr	BASEPRI, r1
 8003c2e:	607b      	str	r3, [r7, #4]
 8003c30:	4807      	ldr	r0, [pc, #28]	; (8003c50 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003c32:	f7ff f8b9 	bl	8002da8 <_PreparePacket>
 8003c36:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003c38:	2211      	movs	r2, #17
 8003c3a:	6839      	ldr	r1, [r7, #0]
 8003c3c:	6838      	ldr	r0, [r7, #0]
 8003c3e:	f7ff f9a1 	bl	8002f84 <_SendPacket>
  RECORD_END();
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f383 8811 	msr	BASEPRI, r3
}
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20013364 	.word	0x20013364

08003c54 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003c5c:	f3ef 8311 	mrs	r3, BASEPRI
 8003c60:	f04f 0120 	mov.w	r1, #32
 8003c64:	f381 8811 	msr	BASEPRI, r1
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	4819      	ldr	r0, [pc, #100]	; (8003cd0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8003c6c:	f7ff f89c 	bl	8002da8 <_PreparePacket>
 8003c70:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003c76:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	61bb      	str	r3, [r7, #24]
 8003c88:	e00b      	b.n	8003ca2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	1c59      	adds	r1, r3, #1
 8003c92:	61f9      	str	r1, [r7, #28]
 8003c94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	09db      	lsrs	r3, r3, #7
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ca6:	d8f0      	bhi.n	8003c8a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	61fa      	str	r2, [r7, #28]
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003cb8:	2208      	movs	r2, #8
 8003cba:	68f9      	ldr	r1, [r7, #12]
 8003cbc:	6938      	ldr	r0, [r7, #16]
 8003cbe:	f7ff f961 	bl	8002f84 <_SendPacket>
  RECORD_END();
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f383 8811 	msr	BASEPRI, r3
}
 8003cc8:	bf00      	nop
 8003cca:	3720      	adds	r7, #32
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20013364 	.word	0x20013364
 8003cd4:	20013334 	.word	0x20013334

08003cd8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003ce0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ce4:	f04f 0120 	mov.w	r1, #32
 8003ce8:	f381 8811 	msr	BASEPRI, r1
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	4819      	ldr	r0, [pc, #100]	; (8003d54 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8003cf0:	f7ff f85a 	bl	8002da8 <_PreparePacket>
 8003cf4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003cfa:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	e00b      	b.n	8003d26 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	1c59      	adds	r1, r3, #1
 8003d16:	61f9      	str	r1, [r7, #28]
 8003d18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	09db      	lsrs	r3, r3, #7
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b7f      	cmp	r3, #127	; 0x7f
 8003d2a:	d8f0      	bhi.n	8003d0e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	61fa      	str	r2, [r7, #28]
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	68f9      	ldr	r1, [r7, #12]
 8003d40:	6938      	ldr	r0, [r7, #16]
 8003d42:	f7ff f91f 	bl	8002f84 <_SendPacket>
  RECORD_END();
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f383 8811 	msr	BASEPRI, r3
}
 8003d4c:	bf00      	nop
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20013364 	.word	0x20013364
 8003d58:	20013334 	.word	0x20013334

08003d5c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003d64:	f3ef 8311 	mrs	r3, BASEPRI
 8003d68:	f04f 0120 	mov.w	r1, #32
 8003d6c:	f381 8811 	msr	BASEPRI, r1
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	4819      	ldr	r0, [pc, #100]	; (8003dd8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8003d74:	f7ff f818 	bl	8002da8 <_PreparePacket>
 8003d78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003d7e:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	61fb      	str	r3, [r7, #28]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	e00b      	b.n	8003daa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	1c59      	adds	r1, r3, #1
 8003d9a:	61f9      	str	r1, [r7, #28]
 8003d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	701a      	strb	r2, [r3, #0]
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	09db      	lsrs	r3, r3, #7
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	2b7f      	cmp	r3, #127	; 0x7f
 8003dae:	d8f0      	bhi.n	8003d92 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	61fa      	str	r2, [r7, #28]
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003dc0:	2206      	movs	r2, #6
 8003dc2:	68f9      	ldr	r1, [r7, #12]
 8003dc4:	6938      	ldr	r0, [r7, #16]
 8003dc6:	f7ff f8dd 	bl	8002f84 <_SendPacket>
  RECORD_END();
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f383 8811 	msr	BASEPRI, r3
}
 8003dd0:	bf00      	nop
 8003dd2:	3720      	adds	r7, #32
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20013364 	.word	0x20013364
 8003ddc:	20013334 	.word	0x20013334

08003de0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	1ad3      	subs	r3, r2, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	20013334 	.word	0x20013334

08003e00 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08c      	sub	sp, #48	; 0x30
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003e0a:	4b40      	ldr	r3, [pc, #256]	; (8003f0c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d077      	beq.n	8003f02 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8003e12:	4b3e      	ldr	r3, [pc, #248]	; (8003f0c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003e18:	2300      	movs	r3, #0
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e1c:	e008      	b.n	8003e30 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d3f2      	bcc.n	8003e1e <SEGGER_SYSVIEW_SendModule+0x1e>
 8003e38:	e000      	b.n	8003e3c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003e3a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d055      	beq.n	8003eee <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e42:	f3ef 8311 	mrs	r3, BASEPRI
 8003e46:	f04f 0120 	mov.w	r1, #32
 8003e4a:	f381 8811 	msr	BASEPRI, r1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	482f      	ldr	r0, [pc, #188]	; (8003f10 <SEGGER_SYSVIEW_SendModule+0x110>)
 8003e52:	f7fe ffa9 	bl	8002da8 <_PreparePacket>
 8003e56:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	623b      	str	r3, [r7, #32]
 8003e64:	e00b      	b.n	8003e7e <SEGGER_SYSVIEW_SendModule+0x7e>
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	1c59      	adds	r1, r3, #1
 8003e6e:	6279      	str	r1, [r7, #36]	; 0x24
 8003e70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	09db      	lsrs	r3, r3, #7
 8003e7c:	623b      	str	r3, [r7, #32]
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	2b7f      	cmp	r3, #127	; 0x7f
 8003e82:	d8f0      	bhi.n	8003e66 <SEGGER_SYSVIEW_SendModule+0x66>
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	627a      	str	r2, [r7, #36]	; 0x24
 8003e8a:	6a3a      	ldr	r2, [r7, #32]
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	701a      	strb	r2, [r3, #0]
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	61fb      	str	r3, [r7, #28]
 8003e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	e00b      	b.n	8003eb8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	1c59      	adds	r1, r3, #1
 8003ea8:	61f9      	str	r1, [r7, #28]
 8003eaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	09db      	lsrs	r3, r3, #7
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b7f      	cmp	r3, #127	; 0x7f
 8003ebc:	d8f0      	bhi.n	8003ea0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	61fa      	str	r2, [r7, #28]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2280      	movs	r2, #128	; 0x80
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7fe ff36 	bl	8002d48 <_EncodeStr>
 8003edc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003ede:	2216      	movs	r2, #22
 8003ee0:	68f9      	ldr	r1, [r7, #12]
 8003ee2:	6938      	ldr	r0, [r7, #16]
 8003ee4:	f7ff f84e 	bl	8002f84 <_SendPacket>
      RECORD_END();
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d006      	beq.n	8003f02 <SEGGER_SYSVIEW_SendModule+0x102>
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8003efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4798      	blx	r3
    }
  }
}
 8003f02:	bf00      	nop
 8003f04:	3730      	adds	r7, #48	; 0x30
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	2001335c 	.word	0x2001335c
 8003f10:	20013364 	.word	0x20013364

08003f14 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00f      	beq.n	8003f42 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f2      	bne.n	8003f28 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	2001335c 	.word	0x2001335c

08003f50 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003f56:	f3ef 8311 	mrs	r3, BASEPRI
 8003f5a:	f04f 0120 	mov.w	r1, #32
 8003f5e:	f381 8811 	msr	BASEPRI, r1
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	4817      	ldr	r0, [pc, #92]	; (8003fc4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003f66:	f7fe ff1f 	bl	8002da8 <_PreparePacket>
 8003f6a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	e00b      	b.n	8003f94 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	1c59      	adds	r1, r3, #1
 8003f84:	6179      	str	r1, [r7, #20]
 8003f86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	09db      	lsrs	r3, r3, #7
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	2b7f      	cmp	r3, #127	; 0x7f
 8003f98:	d8f0      	bhi.n	8003f7c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	617a      	str	r2, [r7, #20]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003faa:	221b      	movs	r2, #27
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	68b8      	ldr	r0, [r7, #8]
 8003fb0:	f7fe ffe8 	bl	8002f84 <_SendPacket>
  RECORD_END();
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f383 8811 	msr	BASEPRI, r3
}
 8003fba:	bf00      	nop
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20013364 	.word	0x20013364
 8003fc8:	20013360 	.word	0x20013360

08003fcc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	; 0x28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003fd4:	f3ef 8311 	mrs	r3, BASEPRI
 8003fd8:	f04f 0120 	mov.w	r1, #32
 8003fdc:	f381 8811 	msr	BASEPRI, r1
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	4827      	ldr	r0, [pc, #156]	; (8004080 <SEGGER_SYSVIEW_Warn+0xb4>)
 8003fe4:	f7fe fee0 	bl	8002da8 <_PreparePacket>
 8003fe8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003fea:	2280      	movs	r2, #128	; 0x80
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	6938      	ldr	r0, [r7, #16]
 8003ff0:	f7fe feaa 	bl	8002d48 <_EncodeStr>
 8003ff4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	623b      	str	r3, [r7, #32]
 8003ffe:	e00b      	b.n	8004018 <SEGGER_SYSVIEW_Warn+0x4c>
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	b2da      	uxtb	r2, r3
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	1c59      	adds	r1, r3, #1
 8004008:	6279      	str	r1, [r7, #36]	; 0x24
 800400a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	09db      	lsrs	r3, r3, #7
 8004016:	623b      	str	r3, [r7, #32]
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	2b7f      	cmp	r3, #127	; 0x7f
 800401c:	d8f0      	bhi.n	8004000 <SEGGER_SYSVIEW_Warn+0x34>
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	627a      	str	r2, [r7, #36]	; 0x24
 8004024:	6a3a      	ldr	r2, [r7, #32]
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	2300      	movs	r3, #0
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	e00b      	b.n	8004050 <SEGGER_SYSVIEW_Warn+0x84>
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	b2da      	uxtb	r2, r3
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	1c59      	adds	r1, r3, #1
 8004040:	61f9      	str	r1, [r7, #28]
 8004042:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	09db      	lsrs	r3, r3, #7
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b7f      	cmp	r3, #127	; 0x7f
 8004054:	d8f0      	bhi.n	8004038 <SEGGER_SYSVIEW_Warn+0x6c>
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	61fa      	str	r2, [r7, #28]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004066:	221a      	movs	r2, #26
 8004068:	68f9      	ldr	r1, [r7, #12]
 800406a:	6938      	ldr	r0, [r7, #16]
 800406c:	f7fe ff8a 	bl	8002f84 <_SendPacket>
  RECORD_END();
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f383 8811 	msr	BASEPRI, r3
}
 8004076:	bf00      	nop
 8004078:	3728      	adds	r7, #40	; 0x28
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20013364 	.word	0x20013364

08004084 <memcmp>:
 8004084:	b510      	push	{r4, lr}
 8004086:	3901      	subs	r1, #1
 8004088:	4402      	add	r2, r0
 800408a:	4290      	cmp	r0, r2
 800408c:	d101      	bne.n	8004092 <memcmp+0xe>
 800408e:	2000      	movs	r0, #0
 8004090:	e005      	b.n	800409e <memcmp+0x1a>
 8004092:	7803      	ldrb	r3, [r0, #0]
 8004094:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004098:	42a3      	cmp	r3, r4
 800409a:	d001      	beq.n	80040a0 <memcmp+0x1c>
 800409c:	1b18      	subs	r0, r3, r4
 800409e:	bd10      	pop	{r4, pc}
 80040a0:	3001      	adds	r0, #1
 80040a2:	e7f2      	b.n	800408a <memcmp+0x6>

080040a4 <memset>:
 80040a4:	4402      	add	r2, r0
 80040a6:	4603      	mov	r3, r0
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d100      	bne.n	80040ae <memset+0xa>
 80040ac:	4770      	bx	lr
 80040ae:	f803 1b01 	strb.w	r1, [r3], #1
 80040b2:	e7f9      	b.n	80040a8 <memset+0x4>

080040b4 <__libc_init_array>:
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	4d0d      	ldr	r5, [pc, #52]	; (80040ec <__libc_init_array+0x38>)
 80040b8:	4c0d      	ldr	r4, [pc, #52]	; (80040f0 <__libc_init_array+0x3c>)
 80040ba:	1b64      	subs	r4, r4, r5
 80040bc:	10a4      	asrs	r4, r4, #2
 80040be:	2600      	movs	r6, #0
 80040c0:	42a6      	cmp	r6, r4
 80040c2:	d109      	bne.n	80040d8 <__libc_init_array+0x24>
 80040c4:	4d0b      	ldr	r5, [pc, #44]	; (80040f4 <__libc_init_array+0x40>)
 80040c6:	4c0c      	ldr	r4, [pc, #48]	; (80040f8 <__libc_init_array+0x44>)
 80040c8:	f000 f826 	bl	8004118 <_init>
 80040cc:	1b64      	subs	r4, r4, r5
 80040ce:	10a4      	asrs	r4, r4, #2
 80040d0:	2600      	movs	r6, #0
 80040d2:	42a6      	cmp	r6, r4
 80040d4:	d105      	bne.n	80040e2 <__libc_init_array+0x2e>
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040dc:	4798      	blx	r3
 80040de:	3601      	adds	r6, #1
 80040e0:	e7ee      	b.n	80040c0 <__libc_init_array+0xc>
 80040e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e6:	4798      	blx	r3
 80040e8:	3601      	adds	r6, #1
 80040ea:	e7f2      	b.n	80040d2 <__libc_init_array+0x1e>
 80040ec:	080041e4 	.word	0x080041e4
 80040f0:	080041e4 	.word	0x080041e4
 80040f4:	080041e4 	.word	0x080041e4
 80040f8:	080041e8 	.word	0x080041e8

080040fc <memcpy>:
 80040fc:	440a      	add	r2, r1
 80040fe:	4291      	cmp	r1, r2
 8004100:	f100 33ff 	add.w	r3, r0, #4294967295
 8004104:	d100      	bne.n	8004108 <memcpy+0xc>
 8004106:	4770      	bx	lr
 8004108:	b510      	push	{r4, lr}
 800410a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800410e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004112:	4291      	cmp	r1, r2
 8004114:	d1f9      	bne.n	800410a <memcpy+0xe>
 8004116:	bd10      	pop	{r4, pc}

08004118 <_init>:
 8004118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411a:	bf00      	nop
 800411c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411e:	bc08      	pop	{r3}
 8004120:	469e      	mov	lr, r3
 8004122:	4770      	bx	lr

08004124 <_fini>:
 8004124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004126:	bf00      	nop
 8004128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412a:	bc08      	pop	{r3}
 800412c:	469e      	mov	lr, r3
 800412e:	4770      	bx	lr
